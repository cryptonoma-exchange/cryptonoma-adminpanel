"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var Bluebird = require("bluebird");
var crypto = require("crypto");
var co = Bluebird.coroutine;
var bitgoAccountLib = require("@bitgo/account-lib");
var bitgo_utxo_lib_1 = require("bitgo-utxo-lib");
var request = require("superagent");
var common = require("../../common");
var baseCoin_1 = require("../baseCoin");
exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE = 1e6;
var NodeTypes;
(function (NodeTypes) {
    NodeTypes[NodeTypes["Full"] = 0] = "Full";
    NodeTypes[NodeTypes["Solidity"] = 1] = "Solidity";
})(NodeTypes = exports.NodeTypes || (exports.NodeTypes = {}));
var Trx = /** @class */ (function (_super) {
    __extends(Trx, _super);
    function Trx(bitgo, staticsCoin) {
        var _this = _super.call(this, bitgo) || this;
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        _this._staticsCoin = staticsCoin;
        return _this;
    }
    Trx.prototype.getChain = function () {
        return this._staticsCoin.name;
    };
    Trx.prototype.getFamily = function () {
        return this._staticsCoin.family;
    };
    Trx.prototype.getFullName = function () {
        return this._staticsCoin.fullName;
    };
    Trx.prototype.getBaseFactor = function () {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    };
    Trx.createInstance = function (bitgo, staticsCoin) {
        return new Trx(bitgo, staticsCoin);
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Trx.prototype.valuelessTransferAllowed = function () {
        return true;
    };
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    Trx.prototype.isValidAddress = function (address) {
        if (!address) {
            return false;
        }
        return this.isValidHexAddress(address) || bitgoAccountLib.Trx.Utils.isBase58Address(address);
    };
    /**
     * Checks if this is a valid hex address
     * @param address hex address
     */
    Trx.prototype.isValidHexAddress = function (address) {
        return address.length === 42 && /^(0x)?([0-9a-f]{2})+$/i.test(address);
    };
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    Trx.prototype.generateKeyPair = function (seed) {
        // TODO: move this and address creation logic to account-lib
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256 bit chain code, both of which must be
            // random. 512 bits is therefore the maximum entropy and gives us maximum security against cracking.
            seed = crypto.randomBytes(512 / 8);
        }
        var hd = bitgo_utxo_lib_1.HDNode.fromSeedBuffer(seed);
        return {
            pub: hd.neutered().toBase58(),
            prv: hd.toBase58(),
        };
    };
    Trx.prototype.isValidXpub = function (xpub) {
        try {
            return bitgo_utxo_lib_1.HDNode.fromBase58(xpub).isNeutered();
        }
        catch (e) {
            return false;
        }
    };
    Trx.prototype.isValidPub = function (pub) {
        if (this.isValidXpub(pub)) {
            // xpubs can be converted into regular pubs, so technically it is a valid pub
            return true;
        }
        return new RegExp('^04[a-zA-Z0-9]{128}$').test(pub);
    };
    Trx.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Trx.prototype.verifyAddress = function (params) {
        return true;
    };
    Trx.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @param callback
     * @returns Bluebird<SignedTransaction>
     */
    Trx.prototype.signTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txBuilder, transaction, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txBuilder = bitgoAccountLib.getBuilder(self.getChain());
                        txBuilder.from(params.txPrebuild.txHex);
                        txBuilder.sign({ key: params.prv });
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        transaction = _a.sent();
                        response = {
                            txHex: JSON.stringify(transaction.toJson()),
                        };
                        if (transaction.toJson().signature.length >= 2) {
                            return [2 /*return*/, response];
                        }
                        // Half signed transaction
                        return [2 /*return*/, {
                                halfSigned: response,
                            }];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Return boolean indicating whether input is valid seed for the coin
     *
     * @param prv - the prv to be checked
     */
    Trx.prototype.isValidXprv = function (prv) {
        try {
            bitgo_utxo_lib_1.HDNode.fromBase58(prv);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Convert a message to string in hexadecimal format.
     *
     * @param message {Buffer|String} message to sign
     * @return the message as a hexadecimal string
     */
    Trx.prototype.toHexString = function (message) {
        if (typeof message === 'string') {
            return Buffer.from(message).toString('hex');
        }
        else if (Buffer.isBuffer(message)) {
            return message.toString('hex');
        }
        else {
            throw new Error('Invalid messaged passed to signMessage');
        }
    };
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @param callback
     */
    Trx.prototype.signMessage = function (key, message, callback) {
        var self = this;
        return co(function cosignMessage() {
            var toSign, prv, sig;
            return __generator(this, function (_a) {
                toSign = self.toHexString(message);
                prv = key.prv;
                if (self.isValidXprv(prv)) {
                    prv = bitgo_utxo_lib_1.HDNode.fromBase58(prv)
                        .getKey()
                        .getPrivateKeyBuffer();
                }
                sig = bitgoAccountLib.Trx.Utils.signString(toSign, prv, true);
                // remove the preceding 0x
                sig = sig.replace(/^0x/, '');
                return [2 /*return*/, Buffer.from(sig, 'hex')];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Converts an xpub to a compressed pub
     * @param xpub
     */
    Trx.prototype.xpubToCompressedPub = function (xpub) {
        if (!this.isValidXpub(xpub)) {
            throw new Error('invalid xpub');
        }
        var hdNode = bitgo_utxo_lib_1.HDNode.fromBase58(xpub, bitgo_utxo_lib_1.networks.bitcoin);
        return hdNode.keyPair.__Q.getEncoded(false).toString('hex');
    };
    Trx.prototype.compressedPubToHexAddress = function (pub) {
        var byteArrayAddr = bitgoAccountLib.Trx.Utils.getByteArrayFromHexAddress(pub);
        var rawAddress = bitgoAccountLib.Trx.Utils.getRawAddressFromPubKey(byteArrayAddr);
        return bitgoAccountLib.Trx.Utils.getHexAddressFromByteArray(rawAddress);
    };
    Trx.prototype.xprvToCompressedPrv = function (xprv) {
        if (!this.isValidXprv(xprv)) {
            throw new Error('invalid xprv');
        }
        var hdNode = bitgo_utxo_lib_1.HDNode.fromBase58(xprv, bitgo_utxo_lib_1.networks.bitcoin);
        return hdNode.keyPair.d.toBuffer(32).toString('hex');
    };
    /**
     * Make a query to Trongrid for information such as balance, token balance, solidity calls
     * @param query {Object} key-value pairs of parameters to append after /api
     * @param callback
     * @returns {Object} response from Trongrid
     */
    Trx.prototype.recoveryPost = function (query, callback) {
        var self = this;
        return co(function () {
            var nodeUri, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeUri = '';
                        switch (query.node) {
                            case NodeTypes.Full:
                                nodeUri = common.Environments[self.bitgo.getEnv()].tronNodes.full;
                                break;
                            case NodeTypes.Solidity:
                                nodeUri = common.Environments[self.bitgo.getEnv()].tronNodes.solidity;
                                break;
                            default:
                                throw new Error('node type not found');
                        }
                        return [4 /*yield*/, request
                                .post(nodeUri + query.path)
                                .type('json')
                                .send(query.jsonObj)];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error('could not reach Tron node');
                        }
                        // unfortunately, it doesn't look like most TRON nodes return valid json as body
                        return [2 /*return*/, JSON.parse(response.text)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Query our explorer for the balance of an address
     * @param address {String} the address encoded in hex
     * @param callback
     * @returns {BigNumber} address balance
     */
    Trx.prototype.getAccountFromNode = function (address, callback) {
        var self = this;
        return co(function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.recoveryPost({
                            path: '/walletsolidity/getaccount',
                            jsonObj: { address: address },
                            node: NodeTypes.Solidity,
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Retrieves our build transaction from a node.
     * @param toAddr hex-encoded address
     * @param fromAddr hex-encoded address
     * @param amount
     * @param callback
     */
    Trx.prototype.getBuildTransaction = function (toAddr, fromAddr, amount, callback) {
        var self = this;
        return co(function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.recoveryPost({
                            path: '/wallet/createtransaction',
                            jsonObj: {
                                to_address: toAddr,
                                owner_address: fromAddr,
                                amount: amount,
                            },
                            node: NodeTypes.Full,
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Throws an error if any keys in the ownerKeys collection don't match the keys array we pass
     * @param ownerKeys
     * @param keysToFind
     */
    Trx.prototype.checkPermissions = function (ownerKeys, keys) {
        keys = keys.map(function (k) { return k.toUpperCase(); });
        ownerKeys.map(function (key) {
            var hexKey = key.address.toUpperCase();
            if (!keys.includes(hexKey)) {
                throw new Error("pub address " + hexKey + " not found in account");
            }
            if (key.weight !== 1) {
                throw new Error('owner permission is invalid for this structure');
            }
        });
    };
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     * @param callback
     */
    Trx.prototype.recover = function (params, callback) {
        var self = this;
        return co(function () {
            var isKrsRecovery, isUnsignedSweep, keys, bitgoHexAddr, recoveryAddressHex, account, recoveryAmount, userXPub, userXPrv, backupXPub, recoveryAmountMinusFees, buildTx, keyHexAddresses, txBuilder, _a, userPrv, backupXPrv, backupPrv, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        isKrsRecovery = params.backupKey.startsWith('xpub') && !params.userKey.startsWith('xpub');
                        isUnsignedSweep = params.backupKey.startsWith('xpub') && params.userKey.startsWith('xpub');
                        return [4 /*yield*/, self.initiateRecovery(params)];
                    case 1:
                        keys = _c.sent();
                        bitgoHexAddr = self.compressedPubToHexAddress(self.xpubToCompressedPub(params.bitgoKey));
                        recoveryAddressHex = bitgoAccountLib.Trx.Utils.getHexAddressFromBase58Address(params.recoveryDestination);
                        return [4 /*yield*/, self.getAccountFromNode(bitgoHexAddr)];
                    case 2:
                        account = _c.sent();
                        recoveryAmount = account.balance;
                        userXPub = keys[0].neutered().toBase58();
                        userXPrv = keys[0].toBase58();
                        backupXPub = keys[1].neutered().toBase58();
                        // construct the tx -
                        // there's an assumption here being made about fees: for a wallet that hasn't been used in awhile, the implication is
                        // it has maximum bandwidth. thus, a recovery should cost the minimum amount (1e6 sun or 1 Tron)
                        if (exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE > recoveryAmount) {
                            throw new Error('Amount of funds to recover wouldnt be able to fund a send');
                        }
                        recoveryAmountMinusFees = recoveryAmount - exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE;
                        return [4 /*yield*/, self.getBuildTransaction(recoveryAddressHex, bitgoHexAddr, recoveryAmountMinusFees)];
                    case 3:
                        buildTx = _c.sent();
                        keyHexAddresses = [
                            self.compressedPubToHexAddress(self.xpubToCompressedPub(userXPub)),
                            self.compressedPubToHexAddress(self.xpubToCompressedPub(backupXPub)),
                            bitgoHexAddr,
                        ];
                        // run checks to ensure this is a valid tx - permissions match our signer keys
                        self.checkPermissions(account.owner_permission.keys, keyHexAddresses);
                        self.checkPermissions(account.active_permission[0].keys, keyHexAddresses);
                        txBuilder = bitgoAccountLib.getBuilder(self.getChain());
                        txBuilder.from(buildTx);
                        if (!isUnsignedSweep) return [3 /*break*/, 5];
                        _a = {};
                        return [4 /*yield*/, txBuilder.build()];
                    case 4: return [2 /*return*/, (_a.tx = (_c.sent()).toJson(),
                            _a.recoveryAmount = recoveryAmountMinusFees,
                            _a)];
                    case 5:
                        userPrv = self.xprvToCompressedPrv(userXPrv);
                        txBuilder.sign({ key: userPrv });
                        // krs recoveries don't get signed
                        if (!isKrsRecovery) {
                            backupXPrv = keys[1].toBase58();
                            backupPrv = self.xprvToCompressedPrv(backupXPrv);
                            txBuilder.sign({ key: backupPrv });
                        }
                        _b = {};
                        return [4 /*yield*/, txBuilder.build()];
                    case 6: return [2 /*return*/, (_b.tx = (_c.sent()).toJson(),
                            _b.recoveryAmount = recoveryAmountMinusFees,
                            _b)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Explain a Tron transaction from txHex
     * @param params
     * @param callback
     */
    Trx.prototype.explainTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txHex, txBuilder, tx, outputs, displayOrder, explanationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
                        if (!txHex || !params.feeInfo) {
                            throw new Error('missing explain tx parameters');
                        }
                        txBuilder = bitgoAccountLib.getBuilder(self.getChain());
                        txBuilder.from(txHex);
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        tx = _a.sent();
                        outputs = [
                            {
                                amount: tx.outputs[0].value.toString(),
                                address: tx.outputs[0].address,
                            },
                        ];
                        displayOrder = [
                            'id',
                            'outputAmount',
                            'changeAmount',
                            'outputs',
                            'changeOutputs',
                            'fee',
                            'timestamp',
                            'expiration',
                        ];
                        explanationResult = {
                            displayOrder: displayOrder,
                            id: tx.id,
                            outputs: outputs,
                            outputAmount: outputs[0].amount,
                            changeOutputs: [],
                            changeAmount: '0',
                            fee: params.feeInfo,
                            timestamp: tx.validFrom,
                            expiration: tx.validTo,
                        };
                        return [2 /*return*/, explanationResult];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return Trx;
}(baseCoin_1.BaseCoin));
exports.Trx = Trx;
//# sourceMappingURL=data:application/json;base64,