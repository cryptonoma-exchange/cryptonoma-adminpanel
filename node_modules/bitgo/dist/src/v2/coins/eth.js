"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var bignumber_js_1 = require("bignumber.js");
var utxoLib = require("bitgo-utxo-lib");
var Bluebird = require("bluebird");
var crypto = require("crypto");
var debugLib = require("debug");
var Keccak = require("keccak");
var _ = require("lodash");
var secp256k1 = require("secp256k1");
var request = require("superagent");
var baseCoin_1 = require("../baseCoin");
var erc20Token_1 = require("./erc20Token");
var wallet_1 = require("../wallet");
var common = require("../../common");
var config = require("../../config");
var util_1 = require("../internal/util");
var errors_1 = require("../../errors");
var co = Bluebird.coroutine;
var debug = debugLib('bitgo:v2:eth');
exports.optionalDeps = {
    get ethAbi() {
        try {
            return require('ethereumjs-abi');
        }
        catch (e) {
            debug('unable to load ethereumjs-abi:');
            debug(e.stack);
            throw new errors_1.EthereumLibraryUnavailableError("ethereumjs-abi");
        }
    },
    get ethUtil() {
        try {
            return require('ethereumjs-util');
        }
        catch (e) {
            debug('unable to load ethereumjs-util:');
            debug(e.stack);
            throw new errors_1.EthereumLibraryUnavailableError("ethereumjs-util");
        }
    },
    get EthTx() {
        try {
            return require('ethereumjs-tx');
        }
        catch (e) {
            debug('unable to load ethereumjs-tx:');
            debug(e.stack);
            throw new errors_1.EthereumLibraryUnavailableError("ethereumjs-tx");
        }
    },
};
var Eth = /** @class */ (function (_super) {
    __extends(Eth, _super);
    function Eth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Eth.createInstance = function (bitgo) {
        return new Eth(bitgo);
    };
    /**
     * Returns the factor between the base unit and its smallest subdivison
     * @return {number}
     */
    Eth.prototype.getBaseFactor = function () {
        // 10^18
        return '1000000000000000000';
    };
    Eth.prototype.getChain = function () {
        return 'eth';
    };
    Eth.prototype.getFamily = function () {
        return 'eth';
    };
    Eth.prototype.getFullName = function () {
        return 'Ethereum';
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Eth.prototype.valuelessTransferAllowed = function () {
        return true;
    };
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    Eth.prototype.transactionDataAllowed = function () {
        return true;
    };
    /**
     * Evaluates whether an address string is valid for this coin
     * @param address
     */
    Eth.prototype.isValidAddress = function (address) {
        return exports.optionalDeps.ethUtil.isValidAddress(exports.optionalDeps.ethUtil.addHexPrefix(address));
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    Eth.prototype.isValidPub = function (pub) {
        try {
            utxoLib.HDNode.fromBase58(pub);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Default gas price from platform
     * @returns {BigNumber}
     */
    Eth.prototype.getRecoveryGasPrice = function () {
        return new exports.optionalDeps.ethUtil.BN('20000000000');
    };
    /**
     * Default gas limit from platform
     * @returns {BigNumber}
     */
    Eth.prototype.getRecoveryGasLimit = function () {
        return new exports.optionalDeps.ethUtil.BN('500000');
    };
    /**
     * Default expire time for a contract call (1 week)
     * @returns {number} Time in seconds
     */
    Eth.prototype.getDefaultExpireTime = function () {
        return Math.floor(new Date().getTime() / 1000) + 60 * 60 * 24 * 7;
    };
    /**
     * Query Etherscan for the balance of an address
     * @param address {String} the ETH address
     * @param callback
     * @returns {BigNumber} address balance
     */
    Eth.prototype.queryAddressBalance = function (address, callback) {
        var self = this;
        return co(function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.recoveryBlockchainExplorerQuery({
                            module: 'account',
                            action: 'balance',
                            address: address,
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new exports.optionalDeps.ethUtil.BN(result.result, 10)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Query Etherscan for the balance of an address for a token
     * @param tokenContractAddress {String} address where the token smart contract is hosted
     * @param walletContractAddress {String} address of the wallet
     * @param callback
     * @returns {BigNumber} token balaance in base units
     */
    Eth.prototype.queryAddressTokenBalance = function (tokenContractAddress, walletContractAddress, callback) {
        var self = this;
        return co(function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!exports.optionalDeps.ethUtil.isValidAddress(tokenContractAddress)) {
                            throw new Error('cannot get balance for invalid token address');
                        }
                        if (!exports.optionalDeps.ethUtil.isValidAddress(walletContractAddress)) {
                            throw new Error('cannot get token balance for invalid wallet address');
                        }
                        return [4 /*yield*/, self.recoveryBlockchainExplorerQuery({
                                module: 'account',
                                action: 'tokenbalance',
                                contractaddress: tokenContractAddress,
                                address: walletContractAddress,
                                tag: 'latest',
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new exports.optionalDeps.ethUtil.BN(result.result, 10)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Get transfer operation for coin
     * @param recipient recipient info
     * @param expireTime expiry time
     * @param contractSequenceId sequence id
     * @returns {Array} operation array
     */
    Eth.prototype.getOperation = function (recipient, expireTime, contractSequenceId) {
        return [
            ['string', 'address', 'uint', 'bytes', 'uint', 'uint'],
            [
                'ETHER',
                new exports.optionalDeps.ethUtil.BN(exports.optionalDeps.ethUtil.stripHexPrefix(recipient.address), 16),
                recipient.amount,
                new Buffer(exports.optionalDeps.ethUtil.stripHexPrefix(recipient.data) || '', 'hex'),
                expireTime,
                contractSequenceId,
            ],
        ];
    };
    Eth.prototype.getOperationSha3ForExecuteAndConfirm = function (recipients, expireTime, contractSequenceId) {
        var _a;
        if (!recipients || !Array.isArray(recipients)) {
            throw new Error('expecting array of recipients');
        }
        // Right now we only support 1 recipient
        if (recipients.length !== 1) {
            throw new Error('must send to exactly 1 recipient');
        }
        if (!_.isNumber(expireTime)) {
            throw new Error('expireTime must be number of seconds since epoch');
        }
        if (!_.isNumber(contractSequenceId)) {
            throw new Error('contractSequenceId must be number');
        }
        // Check inputs
        recipients.forEach(function (recipient) {
            if (!_.isString(recipient.address) ||
                !exports.optionalDeps.ethUtil.isValidAddress(exports.optionalDeps.ethUtil.addHexPrefix(recipient.address))) {
                throw new Error('Invalid address: ' + recipient.address);
            }
            var amount;
            try {
                amount = new bignumber_js_1.BigNumber(recipient.amount);
            }
            catch (e) {
                throw new Error('Invalid amount for: ' + recipient.address + ' - should be numeric');
            }
            recipient.amount = amount.toFixed(0);
            if (recipient.data && !_.isString(recipient.data)) {
                throw new Error('Data for recipient ' + recipient.address + ' - should be of type hex string');
            }
        });
        var recipient = recipients[0];
        return exports.optionalDeps.ethUtil.bufferToHex((_a = exports.optionalDeps.ethAbi).soliditySHA3.apply(_a, this.getOperation(recipient, expireTime, contractSequenceId)));
    };
    /**
     * Queries the contract (via Etherscan) for the next sequence ID
     * @param address {String} address of the contract
     * @param callback
     * @returns {Number} sequence ID
     */
    Eth.prototype.querySequenceId = function (address, callback) {
        var self = this;
        return co(function () {
            var sequenceIdMethodSignature, sequenceIdArgs, sequenceIdData, result, sequenceIdHex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sequenceIdMethodSignature = exports.optionalDeps.ethAbi.methodID('getNextSequenceId', []);
                        sequenceIdArgs = exports.optionalDeps.ethAbi.rawEncode([], []);
                        sequenceIdData = Buffer.concat([sequenceIdMethodSignature, sequenceIdArgs]).toString('hex');
                        return [4 /*yield*/, self.recoveryBlockchainExplorerQuery({
                                module: 'proxy',
                                action: 'eth_call',
                                to: address,
                                data: sequenceIdData,
                                tag: 'latest',
                            })];
                    case 1:
                        result = _a.sent();
                        sequenceIdHex = result.result;
                        return [2 /*return*/, new exports.optionalDeps.ethUtil.BN(sequenceIdHex.slice(2), 16).toNumber()];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Helper function for signTransaction for the rare case that SDK is doing the second signature
     * Note: we are expecting this to be called from the offline vault
     * @param params.txPrebuild
     * @param params.signingKeyNonce
     * @param params.walletContractAddress
     * @param params.prv
     * @returns {{txHex: *}}
     */
    Eth.prototype.signFinal = function (params) {
        var txPrebuild = params.txPrebuild;
        if (!_.isNumber(params.signingKeyNonce)) {
            throw new Error('must have signingKeyNonce as a parameter, and it must be a number');
        }
        if (_.isUndefined(params.walletContractAddress)) {
            throw new Error('params must include walletContractAddress, but got undefined');
        }
        var signingNode = utxoLib.HDNode.fromBase58(params.prv);
        var signingKey = signingNode.getKey().getPrivateKeyBuffer();
        var txInfo = {
            recipient: txPrebuild.recipients[0],
            expireTime: txPrebuild.halfSigned.expireTime,
            contractSequenceId: txPrebuild.halfSigned.contractSequenceId,
            signature: txPrebuild.halfSigned.signature,
        };
        var sendMethodArgs = this.getSendMethodArgs(txInfo);
        var methodSignature = exports.optionalDeps.ethAbi.methodID('sendMultiSig', _.map(sendMethodArgs, 'type'));
        var encodedArgs = exports.optionalDeps.ethAbi.rawEncode(_.map(sendMethodArgs, 'type'), _.map(sendMethodArgs, 'value'));
        var sendData = Buffer.concat([methodSignature, encodedArgs]);
        var ethTxParams = {
            to: params.walletContractAddress,
            nonce: params.signingKeyNonce,
            value: 0,
            gasPrice: new exports.optionalDeps.ethUtil.BN(txPrebuild.gasPrice),
            gasLimit: new exports.optionalDeps.ethUtil.BN(txPrebuild.gasLimit),
            data: sendData,
            spendAmount: params.recipients[0].amount,
        };
        var ethTx = new exports.optionalDeps.EthTx(ethTxParams);
        ethTx.sign(signingKey);
        return { txHex: ethTx.serialize().toString('hex') };
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     * @param params
     * - txPrebuild
     * - prv
     * @param callback
     * @returns {Bluebird<SignedTransaction>}
     */
    Eth.prototype.signTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txPrebuild, userPrv, EXPIRETIME_DEFAULT, secondsSinceEpoch, expireTime, sequenceId, operationHash, signature, txParams;
            return __generator(this, function (_a) {
                txPrebuild = params.txPrebuild;
                userPrv = params.prv;
                EXPIRETIME_DEFAULT = 60 * 60 * 24 * 7;
                if (_.isUndefined(txPrebuild) || !_.isObject(txPrebuild)) {
                    if (!_.isUndefined(txPrebuild) && !_.isObject(txPrebuild)) {
                        throw new Error("txPrebuild must be an object, got type " + typeof txPrebuild);
                    }
                    throw new Error('missing txPrebuild parameter');
                }
                if (_.isUndefined(userPrv) || !_.isString(userPrv)) {
                    if (!_.isUndefined(userPrv) && !_.isString(userPrv)) {
                        throw new Error("prv must be a string, got type " + typeof userPrv);
                    }
                    throw new Error('missing prv parameter to sign transaction');
                }
                params.recipients = txPrebuild.recipients || params.recipients;
                // if no recipients in either params or txPrebuild, then throw an error
                if (!params.recipients || !Array.isArray(params.recipients)) {
                    throw new Error('recipients missing or not array');
                }
                // Normally the SDK provides the first signature for an ETH tx, but occasionally it provides the second and final one.
                if (params.isLastSignature) {
                    // In this case when we're doing the second (final) signature, the logic is different.
                    return [2 /*return*/, self.signFinal(params)];
                }
                secondsSinceEpoch = Math.floor(new Date().getTime() / 1000);
                expireTime = params.expireTime || secondsSinceEpoch + EXPIRETIME_DEFAULT;
                sequenceId = txPrebuild.nextContractSequenceId;
                if (_.isUndefined(sequenceId)) {
                    throw new Error('transaction prebuild missing required property nextContractSequenceId');
                }
                operationHash = self.getOperationSha3ForExecuteAndConfirm(params.recipients, expireTime, sequenceId);
                signature = util_1.Util.ethSignMsgHash(operationHash, util_1.Util.xprvToEthPrivateKey(userPrv));
                txParams = {
                    recipients: params.recipients,
                    expireTime: expireTime,
                    contractSequenceId: sequenceId,
                    sequenceId: params.sequenceId,
                    operationHash: operationHash,
                    signature: signature,
                    gasLimit: params.gasLimit,
                    gasPrice: params.gasPrice,
                    hopTransaction: txPrebuild.hopTransaction,
                };
                return [2 /*return*/, { halfSigned: txParams }];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Ensure either enterprise or newFeeAddress is passed, to know whether to create new key or use enterprise key
     * @param params
     * @param params.enterprise {String} the enterprise id to associate with this key
     * @param params.newFeeAddress {Boolean} create a new fee address (enterprise not needed in this case)
     */
    Eth.prototype.preCreateBitGo = function (params) {
        // We always need params object, since either enterprise or newFeeAddress is required
        if (!_.isObject(params)) {
            throw new Error("preCreateBitGo must be passed a params object. Got " + params + " (type " + typeof params + ")");
        }
        if (_.isUndefined(params.enterprise) && _.isUndefined(params.newFeeAddress)) {
            throw new Error('expecting enterprise when adding BitGo key. If you want to create a new ETH bitgo key, set the newFeeAddress parameter to true.');
        }
        // Check whether key should be an enterprise key or a BitGo key for a new fee address
        if (!_.isUndefined(params.enterprise) && !_.isUndefined(params.newFeeAddress)) {
            throw new Error("Incompatible arguments - cannot pass both enterprise and newFeeAddress parameter.");
        }
        if (!_.isUndefined(params.enterprise) && !_.isString(params.enterprise)) {
            throw new Error("enterprise should be a string - got " + params.enterprise + " (type " + typeof params.enterprise + ")");
        }
        if (!_.isUndefined(params.newFeeAddress) && !_.isBoolean(params.newFeeAddress)) {
            throw new Error("newFeeAddress should be a boolean - got " + params.newFeeAddress + " (type " + typeof params.newFeeAddress + ")");
        }
    };
    /**
     * Queries public block explorer to get the next ETH nonce that should be used for the given ETH address
     * @param address
     * @param callback
     * @returns {*}
     */
    Eth.prototype.getAddressNonce = function (address, callback) {
        var self = this;
        return co(function () {
            var nonce, result, backupKeyTxList, outgoingTxs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nonce = 0;
                        return [4 /*yield*/, self.recoveryBlockchainExplorerQuery({
                                module: 'account',
                                action: 'txlist',
                                address: address,
                            })];
                    case 1:
                        result = _a.sent();
                        backupKeyTxList = result.result;
                        if (backupKeyTxList.length > 0) {
                            outgoingTxs = backupKeyTxList.filter(function (tx) { return tx.from === address; });
                            nonce = outgoingTxs.length;
                        }
                        return [2 /*return*/, nonce];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Helper function for recover()
     * This transforms the unsigned transaction information into a format the BitGo offline vault expects
     * @param txInfo
     * @param ethTx
     * @param userKey
     * @param backupKey
     * @param gasPrice
     * @param gasLimit
     * @param callback
     * @returns {{tx: *, userKey: *, backupKey: *, coin: string, amount: string, gasPrice: string, gasLimit: string, recipients: ({address, amount}|{address: ({address, amount}|string), amount: string}|string)[]}}
     */
    Eth.prototype.formatForOfflineVault = function (txInfo, ethTx, userKey, backupKey, gasPrice, gasLimit, callback) {
        var self = this;
        return co(function () {
            var backupHDNode, backupSigningKey, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        backupHDNode = utxoLib.HDNode.fromBase58(backupKey);
                        backupSigningKey = backupHDNode.getKey().getPublicKeyBuffer();
                        _a = {
                            tx: ethTx.serialize().toString('hex'),
                            userKey: userKey,
                            backupKey: backupKey,
                            coin: self.getChain(),
                            gasPrice: exports.optionalDeps.ethUtil.bufferToInt(gasPrice).toFixed(),
                            gasLimit: gasLimit,
                            recipients: [txInfo.recipient],
                            walletContractAddress: '0x' + ethTx.to.toString('hex'),
                            amount: txInfo.recipient.amount
                        };
                        return [4 /*yield*/, self.getAddressNonce("0x" + exports.optionalDeps.ethUtil.publicToAddress(backupSigningKey, true).toString('hex'))];
                    case 1:
                        response = (_a.backupKeyNonce = _b.sent(),
                            _a);
                        _.extend(response, txInfo);
                        response.nextContractSequenceId = response.contractSequenceId;
                        return [2 /*return*/, response];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     * @param params.userKey {String} [encrypted] xprv
     * @param params.backupKey {String} [encrypted] xprv or xpub if the xprv is held by a KRS provider
     * @param params.walletPassphrase {String} used to decrypt userKey and backupKey
     * @param params.walletContractAddress {String} the ETH address of the wallet contract
     * @param params.krsProvider {String} necessary if backup key is held by KRS
     * @param params.recoveryDestination {String} target address to send recovered funds to
     * @param callback
     */
    Eth.prototype.recover = function (params, callback) {
        var self = this;
        return co(function recover() {
            var isKrsRecovery, isUnsignedSweep, userKey, backupKey, gasPrice, gasLimit, backupKeyAddress, backupSigningKey, backupHDNode, backupPrv, backupHDNode, backupKeyNonce, backupKeyBalance, txAmount, recipients, sequenceId, operationHash, signature, txInfo, sendMethodArgs, methodSignature, encodedArgs, sendData, tx, signedTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (_.isUndefined(params.userKey)) {
                            throw new Error('missing userKey');
                        }
                        if (_.isUndefined(params.backupKey)) {
                            throw new Error('missing backupKey');
                        }
                        if (_.isUndefined(params.walletPassphrase) && !params.userKey.startsWith('xpub')) {
                            throw new Error('missing wallet passphrase');
                        }
                        if (_.isUndefined(params.walletContractAddress) || !self.isValidAddress(params.walletContractAddress)) {
                            throw new Error('invalid walletContractAddress');
                        }
                        if (_.isUndefined(params.recoveryDestination) || !self.isValidAddress(params.recoveryDestination)) {
                            throw new Error('invalid recoveryDestination');
                        }
                        isKrsRecovery = params.backupKey.startsWith('xpub') && !params.userKey.startsWith('xpub');
                        isUnsignedSweep = params.backupKey.startsWith('xpub') && params.userKey.startsWith('xpub');
                        if (isKrsRecovery && params.krsProvider && _.isUndefined(config.krsProviders[params.krsProvider])) {
                            throw new Error('unknown key recovery service provider');
                        }
                        userKey = params.userKey.replace(/\s/g, '');
                        backupKey = params.backupKey.replace(/\s/g, '');
                        gasPrice = self.getRecoveryGasPrice();
                        gasLimit = self.getRecoveryGasLimit();
                        // Decrypt private keys from KeyCard values if necessary
                        if (!userKey.startsWith('xpub') && !userKey.startsWith('xprv')) {
                            try {
                                userKey = self.bitgo.decrypt({
                                    input: userKey,
                                    password: params.walletPassphrase,
                                });
                            }
                            catch (e) {
                                throw new Error("Error decrypting user keychain: " + e.message);
                            }
                        }
                        if (isKrsRecovery || isUnsignedSweep) {
                            backupHDNode = utxoLib.HDNode.fromBase58(backupKey);
                            backupSigningKey = backupHDNode.getKey().getPublicKeyBuffer();
                            backupKeyAddress = "0x" + exports.optionalDeps.ethUtil.publicToAddress(backupSigningKey, true).toString('hex');
                        }
                        else {
                            backupPrv = void 0;
                            try {
                                backupPrv = self.bitgo.decrypt({
                                    input: backupKey,
                                    password: params.walletPassphrase,
                                });
                            }
                            catch (e) {
                                throw new Error("Error decrypting backup keychain: " + e.message);
                            }
                            backupHDNode = utxoLib.HDNode.fromBase58(backupPrv);
                            backupSigningKey = backupHDNode.getKey().getPrivateKeyBuffer();
                            backupKeyAddress = "0x" + exports.optionalDeps.ethUtil.privateToAddress(backupSigningKey).toString('hex');
                        }
                        return [4 /*yield*/, self.getAddressNonce(backupKeyAddress)];
                    case 1:
                        backupKeyNonce = _a.sent();
                        return [4 /*yield*/, self.queryAddressBalance(backupKeyAddress)];
                    case 2:
                        backupKeyBalance = _a.sent();
                        if (backupKeyBalance.lt(gasPrice.mul(gasLimit))) {
                            throw new Error("Backup key address " + backupKeyAddress + " has balance " + backupKeyBalance.toString(10) + ". This address must have a balance of at least 0.01 ETH to perform recoveries. Try sending some ETH to this address then retry.");
                        }
                        return [4 /*yield*/, self.queryAddressBalance(params.walletContractAddress)];
                    case 3:
                        txAmount = _a.sent();
                        recipients = [
                            {
                                address: params.recoveryDestination,
                                amount: txAmount.toString(10),
                            },
                        ];
                        return [4 /*yield*/, self.querySequenceId(params.walletContractAddress)];
                    case 4:
                        sequenceId = _a.sent();
                        // Get operation hash and sign it
                        if (!isUnsignedSweep) {
                            operationHash = self.getOperationSha3ForExecuteAndConfirm(recipients, self.getDefaultExpireTime(), sequenceId);
                            signature = util_1.Util.ethSignMsgHash(operationHash, util_1.Util.xprvToEthPrivateKey(userKey));
                            try {
                                util_1.Util.ecRecoverEthAddress(operationHash, signature);
                            }
                            catch (e) {
                                throw new Error('Invalid signature');
                            }
                        }
                        txInfo = {
                            recipient: recipients[0],
                            expireTime: self.getDefaultExpireTime(),
                            contractSequenceId: sequenceId,
                            operationHash: operationHash,
                            signature: signature,
                            gasLimit: gasLimit.toString(10),
                        };
                        sendMethodArgs = self.getSendMethodArgs(txInfo);
                        methodSignature = exports.optionalDeps.ethAbi.methodID('sendMultiSig', _.map(sendMethodArgs, 'type'));
                        encodedArgs = exports.optionalDeps.ethAbi.rawEncode(_.map(sendMethodArgs, 'type'), _.map(sendMethodArgs, 'value'));
                        sendData = Buffer.concat([methodSignature, encodedArgs]);
                        tx = new exports.optionalDeps.EthTx({
                            to: params.walletContractAddress,
                            nonce: backupKeyNonce,
                            value: 0,
                            gasPrice: gasPrice,
                            gasLimit: gasLimit,
                            data: sendData,
                            spendAmount: txAmount,
                        });
                        if (isUnsignedSweep) {
                            return [2 /*return*/, self.formatForOfflineVault(txInfo, tx, userKey, backupKey, gasPrice, gasLimit)];
                        }
                        if (!isKrsRecovery) {
                            tx.sign(backupSigningKey);
                        }
                        signedTx = {
                            id: exports.optionalDeps.ethUtil.bufferToHex(tx.hash(true)),
                            tx: tx.serialize().toString('hex'),
                        };
                        if (isKrsRecovery) {
                            signedTx.backupKey = backupKey;
                            signedTx.coin = self.getChain();
                        }
                        return [2 /*return*/, signedTx];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Recover an unsupported token from a BitGo multisig wallet
     * This builds a half-signed transaction, for which there will be an admin route to co-sign and broadcast. Optionally
     * the user can set params.broadcast = true and the half-signed tx will be sent to BitGo for cosigning and broadcasting
     * @param params
     * @param params.wallet the wallet to recover the token from
     * @param params.tokenContractAddress the contract address of the unsupported token
     * @param params.recipient the destination address recovered tokens should be sent to
     * @param params.walletPassphrase the wallet passphrase
     * @param params.prv the xprv
     * @param params.broadcast if true, we will automatically submit the half-signed tx to BitGo for cosigning and broadcasting
     * @param callback
     */
    Eth.prototype.recoverToken = function (params, callback) {
        var self = this;
        return co(function () {
            var coinSpecific, recoveryAmount, sendMethodArgs, methodSignature, encodedArgs, sendData, broadcastParams, recipient, expireTime, _a, nextContractSequenceId, gasPrice, gasLimit, safeSequenceId, operationTypes, operationArgs, operationHash, userPrv, signature, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!_.isObject(params)) {
                            throw new Error("recoverToken must be passed a params object. Got " + params + " (type " + typeof params + ")");
                        }
                        if (_.isUndefined(params.tokenContractAddress) || !_.isString(params.tokenContractAddress)) {
                            throw new Error("tokenContractAddress must be a string, got " + params.tokenContractAddress + " (type " + typeof params.tokenContractAddress + ")");
                        }
                        if (!self.isValidAddress(params.tokenContractAddress)) {
                            throw new Error('tokenContractAddress not a valid address');
                        }
                        if (_.isUndefined(params.wallet) || !(params.wallet instanceof wallet_1.Wallet)) {
                            throw new Error("wallet must be a wallet instance, got " + params.wallet + " (type " + typeof params.wallet + ")");
                        }
                        if (_.isUndefined(params.recipient) || !_.isString(params.recipient)) {
                            throw new Error("recipient must be a string, got " + params.recipient + " (type " + typeof params.recipient + ")");
                        }
                        if (!self.isValidAddress(params.recipient)) {
                            throw new Error('recipient not a valid address');
                        }
                        if (!exports.optionalDeps.ethUtil.bufferToHex || !exports.optionalDeps.ethAbi.soliditySHA3) {
                            throw new Error('ethereum not fully supported in this environment');
                        }
                        coinSpecific = params.wallet.coinSpecific();
                        if (!coinSpecific || !_.isString(coinSpecific.baseAddress)) {
                            throw new Error('missing required coin specific property baseAddress');
                        }
                        return [4 /*yield*/, self.queryAddressTokenBalance(params.tokenContractAddress, coinSpecific.baseAddress)];
                    case 1:
                        recoveryAmount = _b.sent();
                        if (!params.broadcast) return [3 /*break*/, 3];
                        sendMethodArgs = [
                            {
                                name: '_to',
                                type: 'address',
                                value: params.recipient,
                            },
                            {
                                name: '_value',
                                type: 'uint256',
                                value: recoveryAmount.toString(10),
                            },
                        ];
                        methodSignature = exports.optionalDeps.ethAbi.methodID('transfer', _.map(sendMethodArgs, 'type'));
                        encodedArgs = exports.optionalDeps.ethAbi.rawEncode(_.map(sendMethodArgs, 'type'), _.map(sendMethodArgs, 'value'));
                        sendData = Buffer.concat([methodSignature, encodedArgs]);
                        broadcastParams = {
                            address: params.tokenContractAddress,
                            amount: '0',
                            data: sendData.toString('hex'),
                        };
                        if (params.walletPassphrase) {
                            broadcastParams.walletPassphrase = params.walletPassphrase;
                        }
                        else if (params.prv) {
                            broadcastParams.prv = params.prv;
                        }
                        return [4 /*yield*/, params.wallet.send(broadcastParams)];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        recipient = {
                            address: params.recipient,
                            amount: recoveryAmount.toString(10),
                        };
                        expireTime = Math.floor(new Date().getTime() / 1000) + 60 * 60 * 24 * 7;
                        return [4 /*yield*/, params.wallet.prebuildTransaction({
                                recipients: [
                                    {
                                        address: params.recipient,
                                        amount: '1',
                                    },
                                ],
                            })];
                    case 4:
                        _a = _b.sent(), nextContractSequenceId = _a.nextContractSequenceId, gasPrice = _a.gasPrice, gasLimit = _a.gasLimit;
                        safeSequenceId = nextContractSequenceId + 1000;
                        operationTypes = ['string', 'address', 'uint', 'address', 'uint', 'uint'];
                        operationArgs = [
                            // "ERC20" has been added here so that ether operation hashes, signatures cannot be re-used for tokenSending
                            'ERC20',
                            new exports.optionalDeps.ethUtil.BN(exports.optionalDeps.ethUtil.stripHexPrefix(recipient.address), 16),
                            recipient.amount,
                            new exports.optionalDeps.ethUtil.BN(exports.optionalDeps.ethUtil.stripHexPrefix(params.tokenContractAddress), 16),
                            expireTime,
                            safeSequenceId,
                        ];
                        operationHash = exports.optionalDeps.ethUtil.bufferToHex(exports.optionalDeps.ethAbi.soliditySHA3(operationTypes, operationArgs));
                        return [4 /*yield*/, params.wallet.getPrv({
                                prv: params.prv,
                                walletPassphrase: params.walletPassphrase,
                            })];
                    case 5:
                        userPrv = _b.sent();
                        signature = util_1.Util.ethSignMsgHash(operationHash, util_1.Util.xprvToEthPrivateKey(userPrv));
                        result = {
                            halfSigned: {
                                recipient: recipient,
                                expireTime: expireTime,
                                contractSequenceId: safeSequenceId,
                                operationHash: operationHash,
                                signature: signature,
                                gasLimit: gasLimit,
                                gasPrice: gasPrice,
                                tokenContractAddress: params.tokenContractAddress,
                                walletId: params.wallet.id(),
                            },
                        };
                        return [2 /*return*/, result];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Build arguments to call the send method on the wallet contract
     * @param txInfo
     */
    Eth.prototype.getSendMethodArgs = function (txInfo) {
        // Method signature is
        // sendMultiSig(address toAddress, uint value, bytes data, uint expireTime, uint sequenceId, bytes signature)
        return [
            {
                name: 'toAddress',
                type: 'address',
                value: txInfo.recipient.address,
            },
            {
                name: 'value',
                type: 'uint',
                value: txInfo.recipient.amount,
            },
            {
                name: 'data',
                type: 'bytes',
                value: exports.optionalDeps.ethUtil.toBuffer(txInfo.recipient.data || ''),
            },
            {
                name: 'expireTime',
                type: 'uint',
                value: txInfo.expireTime,
            },
            {
                name: 'sequenceId',
                type: 'uint',
                value: txInfo.contractSequenceId,
            },
            {
                name: 'signature',
                type: 'bytes',
                value: exports.optionalDeps.ethUtil.toBuffer(txInfo.signature),
            },
        ];
    };
    /**
     * Make a query to Etherscan for information such as balance, token balance, solidity calls
     * @param query {Object} key-value pairs of parameters to append after /api
     * @param callback
     * @returns {Object} response from Etherscan
     */
    Eth.prototype.recoveryBlockchainExplorerQuery = function (query, callback) {
        var self = this;
        return co(function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request
                            .get(common.Environments[self.bitgo.getEnv()].etherscanBaseUrl + '/api')
                            .query(query)];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error('could not reach Etherscan');
                        }
                        return [2 /*return*/, response.body];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Creates the extra parameters needed to build a hop transaction
     * @param buildParams The original build parameters
     * @param callback
     * @returns extra parameters object to merge with the original build parameters object and send to the platform
     */
    Eth.prototype.createHopTransactionParams = function (buildParams, callback) {
        var self = this;
        return co(function () {
            var wallet, recipients, walletPassphrase, userKeychain, userPrv, userPrvBuffer, recipientAddress, recipientAmount, feeEstimateParams, feeEstimate, gasLimit, gasPrice, gasPriceMax, paymentId, hopDigest, userReqSig, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wallet = buildParams.wallet;
                        recipients = buildParams.recipients;
                        walletPassphrase = buildParams.walletPassphrase;
                        return [4 /*yield*/, self.keychains().get({ id: wallet.keyIds()[0] })];
                    case 1:
                        userKeychain = _a.sent();
                        userPrv = wallet.getUserPrv({ keychain: userKeychain, walletPassphrase: walletPassphrase });
                        userPrvBuffer = utxoLib.HDNode.fromBase58(userPrv)
                            .getKey()
                            .getPrivateKeyBuffer();
                        if (!recipients || !Array.isArray(recipients)) {
                            throw new Error('expecting array of recipients');
                        }
                        // Right now we only support 1 recipient
                        if (recipients.length !== 1) {
                            throw new Error('must send to exactly 1 recipient');
                        }
                        recipientAddress = recipients[0].address;
                        recipientAmount = recipients[0].amount;
                        feeEstimateParams = {
                            recipient: recipientAddress,
                            amount: recipientAmount,
                            hop: true,
                        };
                        return [4 /*yield*/, self.feeEstimate(feeEstimateParams)];
                    case 2:
                        feeEstimate = _a.sent();
                        gasLimit = feeEstimate.gasLimitEstimate;
                        gasPrice = Math.round(feeEstimate.feeEstimate / gasLimit);
                        gasPriceMax = gasPrice * 5;
                        paymentId = Math.floor(Math.random() * 10000000000).toString();
                        hopDigest = Eth.getHopDigest([
                            recipientAddress,
                            recipientAmount,
                            gasPriceMax.toString(),
                            gasLimit.toString(),
                            paymentId,
                        ]);
                        userReqSig = exports.optionalDeps.ethUtil.addHexPrefix(secp256k1.sign(hopDigest, userPrvBuffer).signature.toString('hex'));
                        result = {
                            hopParams: {
                                gasPriceMax: gasPriceMax,
                                userReqSig: userReqSig,
                                paymentId: paymentId,
                            },
                            gasLimit: gasLimit,
                        };
                        return [2 /*return*/, result];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Validates that the hop prebuild from the HSM is valid and correct
     * @param wallet The wallet that the prebuild is for
     * @param hopPrebuild The prebuild to validate
     * @param originalParams The original parameters passed to prebuildTransaction
     * @param callback
     * @returns void
     * @throws Error if The prebuild is invalid
     */
    Eth.prototype.validateHopPrebuild = function (wallet, hopPrebuild, originalParams, callback) {
        var self = this;
        return co(function () {
            var tx, id, signature, serverXpub, serverPubkeyBuffer, signatureBuffer, messageBuffer, isValidSignature, builtHopTx, recipients, originalAmount, originalDestination, hopAmount, hopDestination;
            return __generator(this, function (_a) {
                tx = hopPrebuild.tx, id = hopPrebuild.id, signature = hopPrebuild.signature;
                serverXpub = common.Environments[self.bitgo.getEnv()].hsmXpub;
                serverPubkeyBuffer = utxoLib.HDNode.fromBase58(serverXpub).getPublicKeyBuffer();
                signatureBuffer = Buffer.from(exports.optionalDeps.ethUtil.stripHexPrefix(signature), 'hex');
                messageBuffer = Buffer.from(exports.optionalDeps.ethUtil.stripHexPrefix(id), 'hex');
                isValidSignature = secp256k1.verify(messageBuffer, signatureBuffer.slice(1), serverPubkeyBuffer);
                if (!isValidSignature) {
                    throw new Error("Hop txid signature invalid");
                }
                builtHopTx = new exports.optionalDeps.EthTx(tx);
                // If original params are given, we can check them against the transaction prebuild params
                if (!_.isNil(originalParams)) {
                    recipients = originalParams.recipients;
                    originalAmount = new bignumber_js_1.BigNumber(recipients[0].amount);
                    originalDestination = recipients[0].address;
                    hopAmount = new bignumber_js_1.BigNumber(exports.optionalDeps.ethUtil.bufferToHex(builtHopTx.value));
                    hopDestination = exports.optionalDeps.ethUtil.bufferToHex(builtHopTx.to);
                    if (!hopAmount.eq(originalAmount)) {
                        throw new Error("Hop amount: " + hopAmount + " does not equal original amount: " + originalAmount);
                    }
                    if (hopDestination.toLowerCase() !== originalDestination.toLowerCase()) {
                        throw new Error("Hop destination: " + hopDestination + " does not equal original recipient: " + hopDestination);
                    }
                }
                if (!builtHopTx.verifySignature()) {
                    // We dont want to continue at all in this case, at risk of ETH being stuck on the hop address
                    throw new Error("Invalid hop transaction signature, txid: " + id);
                }
                if (exports.optionalDeps.ethUtil.addHexPrefix(builtHopTx.hash().toString('hex')) !== id) {
                    throw new Error("Signed hop txid does not equal actual txid");
                }
                return [2 /*return*/];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Gets the hop digest for the user to sign. This is validated in the HSM to prove that the user requested this tx
     * @param paramsArr The parameters to hash together for the digest
     */
    Eth.getHopDigest = function (paramsArr) {
        var hash = new Keccak('keccak256');
        hash.update([Eth.hopTransactionSalt].concat(paramsArr).join('$'));
        return hash.digest();
    };
    /**
     * Modify prebuild before sending it to the server. Add things like hop transaction params
     * @param buildParams The whitelisted parameters for this prebuild
     * @param buildParams.hop True if this should prebuild a hop tx, else false
     * @param buildParams.recipients The recipients array of this transaction
     * @param buildParams.wallet The wallet sending this tx
     * @param buildParams.walletPassphrase the passphrase for this wallet
     * @param callback
     */
    Eth.prototype.getExtraPrebuildParams = function (buildParams, callback) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!_.isUndefined(buildParams.hop) &&
                            buildParams.hop &&
                            !_.isUndefined(buildParams.wallet) &&
                            !_.isUndefined(buildParams.recipients) &&
                            !_.isUndefined(buildParams.walletPassphrase))) return [3 /*break*/, 2];
                        if (this instanceof erc20Token_1.Erc20Token) {
                            throw new Error("Hop transactions are not enabled for ERC-20 tokens, nor are they necessary. Please remove the 'hop' parameter and try again.");
                        }
                        return [4 /*yield*/, self.createHopTransactionParams({
                                wallet: buildParams.wallet,
                                recipients: buildParams.recipients,
                                walletPassphrase: buildParams.walletPassphrase,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, {}];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Modify prebuild after receiving it from the server. Add things like nlocktime
     */
    Eth.prototype.postProcessPrebuild = function (params, callback) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!_.isUndefined(params.hopTransaction) &&
                            !_.isUndefined(params.wallet) &&
                            !_.isUndefined(params.buildParams))) return [3 /*break*/, 2];
                        return [4 /*yield*/, self.validateHopPrebuild(params.wallet, params.hopTransaction, params.buildParams)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, params];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Coin-specific things done before signing a transaction, i.e. verification
     * @param params
     * @param callback
     */
    Eth.prototype.presignTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!_.isUndefined(params.hopTransaction) &&
                            !_.isUndefined(params.wallet) &&
                            !_.isUndefined(params.buildParams))) return [3 /*break*/, 2];
                        return [4 /*yield*/, self.validateHopPrebuild(params.wallet, params.hopTransaction)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, params];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Fetch fee estimate information from the server
     * @param {Object} params The params passed into the function
     * @param {Boolean} [params.hop] True if we should estimate fee for a hop transaction
     * @param {String} [params.recipient] The recipient of the transaction to estimate a send to
     * @param {String} [params.data] The ETH tx data to estimate a send for
     * @param callback
     * @returns {Object} The fee info returned from the server
     */
    Eth.prototype.feeEstimate = function (params, callback) {
        var self = this;
        return co(function coFeeEstimate() {
            var query;
            return __generator(this, function (_a) {
                query = {};
                if (params && params.hop) {
                    query.hop = params.hop;
                }
                if (params && params.recipient) {
                    query.recipient = params.recipient;
                }
                if (params && params.data) {
                    query.data = params.data;
                }
                if (params && params.amount) {
                    query.amount = params.amount;
                }
                return [2 /*return*/, self.bitgo
                        .get(self.url('/tx/fee'))
                        .query(query)
                        .result()];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Generate secp256k1 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub and prv
     */
    Eth.prototype.generateKeyPair = function (seed) {
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256
            // bit chain code, both of which must be random. 512 bits is therefore the
            // maximum entropy and gives us maximum security against cracking.
            seed = crypto.randomBytes(512 / 8);
        }
        var extendedKey = utxoLib.HDNode.fromSeedBuffer(seed);
        var xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58(),
        };
    };
    Eth.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Eth.prototype.verifyAddress = function (params) {
        return true;
    };
    Eth.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    Eth.hopTransactionSalt = 'bitgoHopAddressRequestSalt';
    return Eth;
}(baseCoin_1.BaseCoin));
exports.Eth = Eth;
//# sourceMappingURL=data:application/json;base64,