"use strict";
/**
 * @prettier
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var TradingPartnerStatus;
(function (TradingPartnerStatus) {
    TradingPartnerStatus["ACCEPTED"] = "accepted";
    TradingPartnerStatus["REJECTED"] = "rejected";
    TradingPartnerStatus["CANCELED"] = "canceled";
    TradingPartnerStatus["PENDING"] = "pending";
})(TradingPartnerStatus = exports.TradingPartnerStatus || (exports.TradingPartnerStatus = {}));
// Type of partnership used for settlements
var TradingPartnerType;
(function (TradingPartnerType) {
    TradingPartnerType["DIRECT"] = "direct";
    TradingPartnerType["AGENCY"] = "agency";
})(TradingPartnerType = exports.TradingPartnerType || (exports.TradingPartnerType = {}));
var TradingPartner = /** @class */ (function () {
    function TradingPartner(tradingPartnerData, bitgo, enterpriseId, currentAccount) {
        this.id = tradingPartnerData.id;
        this.primaryEnterpriseName = tradingPartnerData.primaryEnterpriseName;
        this.primaryAccountId = tradingPartnerData.primaryAccountId;
        this.secondaryEnterpriseName = tradingPartnerData.secondaryEnterpriseName;
        this.secondaryAccountId = tradingPartnerData.secondaryAccountId;
        this.requesterAccountId = tradingPartnerData.requesterAccountId;
        this.status = tradingPartnerData.status;
        this.type = tradingPartnerData.type;
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.currentAccount = currentAccount;
    }
    /**
     * Check if a trading partner has enough funds to cover the cost of a trade.
     * @param currency the currency to check
     * @param amount the amount of currency to check, represented in base units (such as cents, satoshi, or wei)
     * @param callback
     */
    TradingPartner.prototype.checkBalance = function (currency, amount, callback) {
        var self = this;
        var partnerAccountId = self.primaryAccountId === self.currentAccount.id ? self.secondaryAccountId : self.primaryAccountId;
        return co(function checkBalance() {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.currentAccount.id + "/tradingpartners/" + partnerAccountId + "/balance");
                        return [4 /*yield*/, self.bitgo
                                .get(url)
                                .query({ currency: currency, amount: amount })
                                .result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.check];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return TradingPartner;
}());
exports.TradingPartner = TradingPartner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvdHJhZGluZy90cmFkaW5nUGFydG5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUg7R0FDRztBQUNILG1DQUFxQztBQU1yQyxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBRTlCLElBQVksb0JBS1g7QUFMRCxXQUFZLG9CQUFvQjtJQUM5Qiw2Q0FBcUIsQ0FBQTtJQUNyQiw2Q0FBcUIsQ0FBQTtJQUNyQiw2Q0FBcUIsQ0FBQTtJQUNyQiwyQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBTFcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFLL0I7QUFFRCwyQ0FBMkM7QUFDM0MsSUFBWSxrQkFHWDtBQUhELFdBQVksa0JBQWtCO0lBQzVCLHVDQUFpQixDQUFBO0lBQ2pCLHVDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFIVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQUc3QjtBQUVEO0lBY0Usd0JBQVksa0JBQWtCLEVBQUUsS0FBWSxFQUFFLFlBQW9CLEVBQUUsY0FBOEI7UUFDaEcsSUFBSSxDQUFDLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDO1FBQ3RFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM1RCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsa0JBQWtCLENBQUMsdUJBQXVCLENBQUM7UUFDMUUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDO1FBQ2hFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztRQUVwQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxxQ0FBWSxHQUFaLFVBQWEsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsUUFBZ0M7UUFDN0UsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQU0sZ0JBQWdCLEdBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDckcsT0FBTyxFQUFFLENBQVUsU0FBVSxZQUFZOzs7Ozt3QkFDakMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3JDLDhCQUE0QixJQUFJLENBQUMsWUFBWSxpQkFBWSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUseUJBQW9CLGdCQUFnQixhQUFVLENBQzlILENBQUM7d0JBRWUscUJBQU0sSUFBSSxDQUFDLEtBQUs7aUNBQzlCLEdBQUcsQ0FBQyxHQUFHLENBQUM7aUNBQ1IsS0FBSyxDQUFDLEVBQUUsUUFBUSxVQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQztpQ0FDM0IsTUFBTSxFQUFFLEVBQUE7O3dCQUhMLFFBQVEsR0FBRyxTQUdOO3dCQUVYLHNCQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUM7OztTQUN2QixDQUFDO2FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBdERELElBc0RDO0FBdERZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuXG4vKipcbiAqL1xuaW1wb3J0ICogYXMgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5cbmltcG9ydCB7IE5vZGVDYWxsYmFjayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFRyYWRpbmdBY2NvdW50IH0gZnJvbSAnLi90cmFkaW5nQWNjb3VudCc7XG5cbmNvbnN0IGNvID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xuXG5leHBvcnQgZW51bSBUcmFkaW5nUGFydG5lclN0YXR1cyB7XG4gIEFDQ0VQVEVEID0gJ2FjY2VwdGVkJyxcbiAgUkVKRUNURUQgPSAncmVqZWN0ZWQnLFxuICBDQU5DRUxFRCA9ICdjYW5jZWxlZCcsXG4gIFBFTkRJTkcgPSAncGVuZGluZycsXG59XG5cbi8vIFR5cGUgb2YgcGFydG5lcnNoaXAgdXNlZCBmb3Igc2V0dGxlbWVudHNcbmV4cG9ydCBlbnVtIFRyYWRpbmdQYXJ0bmVyVHlwZSB7XG4gIERJUkVDVCA9ICdkaXJlY3QnLCAvLyBkaXJlY3Qgc2V0dGxlbWVudCBiZXR3ZWVuIHJlcXVlc3RlciBhbmQgY291bnRlcnBhcnR5XG4gIEFHRU5DWSA9ICdhZ2VuY3knLCAvLyBhZ2VudCBzZXR0bGVtZW50IGJldHdlZW4gdHdvIGNvdW50ZXJwYXJ0aWVzIG9mIHRoZSBhZ2VudFxufVxuXG5leHBvcnQgY2xhc3MgVHJhZGluZ1BhcnRuZXIge1xuICBwcml2YXRlIGJpdGdvOiBCaXRHbztcbiAgcHJpdmF0ZSBlbnRlcnByaXNlSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBjdXJyZW50QWNjb3VudDogVHJhZGluZ0FjY291bnQ7IC8vIGFjY291bnQgb2YgdGhlIHVzZXIgdXNpbmcgdGhlIFNESywgbmVlZGVkIHRvIGNvbnN0cnVjdCBiYWxhbmNlIGNoZWNrIFVSTFxuXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuICBwdWJsaWMgcHJpbWFyeUVudGVycHJpc2VOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyBwcmltYXJ5QWNjb3VudElkOiBzdHJpbmc7XG4gIHB1YmxpYyBzZWNvbmRhcnlFbnRlcnByaXNlTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgc2Vjb25kYXJ5QWNjb3VudElkOiBzdHJpbmc7XG4gIHB1YmxpYyByZXF1ZXN0ZXJBY2NvdW50SWQ6IHN0cmluZztcbiAgcHVibGljIHN0YXR1czogVHJhZGluZ1BhcnRuZXJTdGF0dXM7XG4gIHB1YmxpYyB0eXBlOiBUcmFkaW5nUGFydG5lclR5cGU7XG5cbiAgY29uc3RydWN0b3IodHJhZGluZ1BhcnRuZXJEYXRhLCBiaXRnbzogQml0R28sIGVudGVycHJpc2VJZDogc3RyaW5nLCBjdXJyZW50QWNjb3VudDogVHJhZGluZ0FjY291bnQpIHtcbiAgICB0aGlzLmlkID0gdHJhZGluZ1BhcnRuZXJEYXRhLmlkO1xuICAgIHRoaXMucHJpbWFyeUVudGVycHJpc2VOYW1lID0gdHJhZGluZ1BhcnRuZXJEYXRhLnByaW1hcnlFbnRlcnByaXNlTmFtZTtcbiAgICB0aGlzLnByaW1hcnlBY2NvdW50SWQgPSB0cmFkaW5nUGFydG5lckRhdGEucHJpbWFyeUFjY291bnRJZDtcbiAgICB0aGlzLnNlY29uZGFyeUVudGVycHJpc2VOYW1lID0gdHJhZGluZ1BhcnRuZXJEYXRhLnNlY29uZGFyeUVudGVycHJpc2VOYW1lO1xuICAgIHRoaXMuc2Vjb25kYXJ5QWNjb3VudElkID0gdHJhZGluZ1BhcnRuZXJEYXRhLnNlY29uZGFyeUFjY291bnRJZDtcbiAgICB0aGlzLnJlcXVlc3RlckFjY291bnRJZCA9IHRyYWRpbmdQYXJ0bmVyRGF0YS5yZXF1ZXN0ZXJBY2NvdW50SWQ7XG4gICAgdGhpcy5zdGF0dXMgPSB0cmFkaW5nUGFydG5lckRhdGEuc3RhdHVzO1xuICAgIHRoaXMudHlwZSA9IHRyYWRpbmdQYXJ0bmVyRGF0YS50eXBlO1xuXG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuICAgIHRoaXMuY3VycmVudEFjY291bnQgPSBjdXJyZW50QWNjb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRyYWRpbmcgcGFydG5lciBoYXMgZW5vdWdoIGZ1bmRzIHRvIGNvdmVyIHRoZSBjb3N0IG9mIGEgdHJhZGUuXG4gICAqIEBwYXJhbSBjdXJyZW5jeSB0aGUgY3VycmVuY3kgdG8gY2hlY2tcbiAgICogQHBhcmFtIGFtb3VudCB0aGUgYW1vdW50IG9mIGN1cnJlbmN5IHRvIGNoZWNrLCByZXByZXNlbnRlZCBpbiBiYXNlIHVuaXRzIChzdWNoIGFzIGNlbnRzLCBzYXRvc2hpLCBvciB3ZWkpXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgY2hlY2tCYWxhbmNlKGN1cnJlbmN5OiBzdHJpbmcsIGFtb3VudDogc3RyaW5nLCBjYWxsYmFjaz86IE5vZGVDYWxsYmFjazxib29sZWFuPik6IEJsdWViaXJkPGJvb2xlYW4+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBwYXJ0bmVyQWNjb3VudElkID1cbiAgICAgIHNlbGYucHJpbWFyeUFjY291bnRJZCA9PT0gc2VsZi5jdXJyZW50QWNjb3VudC5pZCA/IHNlbGYuc2Vjb25kYXJ5QWNjb3VudElkIDogc2VsZi5wcmltYXJ5QWNjb3VudElkO1xuICAgIHJldHVybiBjbzxib29sZWFuPihmdW5jdGlvbiogY2hlY2tCYWxhbmNlKCkge1xuICAgICAgY29uc3QgdXJsID0gc2VsZi5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7c2VsZi5lbnRlcnByaXNlSWR9L2FjY291bnQvJHtzZWxmLmN1cnJlbnRBY2NvdW50LmlkfS90cmFkaW5ncGFydG5lcnMvJHtwYXJ0bmVyQWNjb3VudElkfS9iYWxhbmNlYFxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBzZWxmLmJpdGdvXG4gICAgICAgIC5nZXQodXJsKVxuICAgICAgICAucXVlcnkoeyBjdXJyZW5jeSwgYW1vdW50IH0pXG4gICAgICAgIC5yZXN1bHQoKTtcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmNoZWNrO1xuICAgIH0pXG4gICAgICAuY2FsbCh0aGlzKVxuICAgICAgLmFzQ2FsbGJhY2soY2FsbGJhY2spO1xuICB9XG59XG4iXX0=