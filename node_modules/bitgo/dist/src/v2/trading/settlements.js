"use strict";
/**
 * @prettier
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var Bluebird = require("bluebird");
var settlement_1 = require("./settlement");
var co = Bluebird.coroutine;
var Settlements = /** @class */ (function () {
    function Settlements(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * Retrieves all settlements for an enterprise
     * @param callback
     */
    Settlements.prototype.list = function (callback) {
        var self = this;
        return co(function list() {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (self.account) {
                            url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/settlements");
                        }
                        else {
                            url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/settlements");
                        }
                        return [4 /*yield*/, self.bitgo.get(url).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.settlements.map(function (settlement) { return new settlement_1.Settlement(settlement, self.bitgo, self.enterpriseId); })];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Retrieves a single settlement by its ID.
     * @param id ID of the settlement
     * @param accountId ID of the trading account that the affirmation belongs to
     * @param callback
     */
    Settlements.prototype.get = function (_a, callback) {
        var id = _a.id, accountId = _a.accountId;
        var self = this;
        return co(function get() {
            var account, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        account = accountId || (self.account && self.account.id);
                        if (!account) {
                            throw new Error('accountId must be provided in parameters for an enterprise context');
                        }
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + account + "/settlements/" + id);
                        return [4 /*yield*/, self.bitgo.get(url).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new settlement_1.Settlement(response, self.bitgo, self.enterpriseId)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Submits a new settlement for a set of trades.
     * NOTE: This function must be called as tradingAccount.settlements().create(), enterprise.settlements().create() is not a valid call.
     * @param params
     * @param params.requesterAccountId trading account ID that is creating this settlement
     * @param params.payload payload authorizing the movement of funds for the included trades
     * @param params.signature hex-encoded signature of the payload
     * @param params.trades list of trades to settle as part of this settlement
     * @param callback
     */
    Settlements.prototype.create = function (params, callback) {
        var self = this;
        return co(function create() {
            var body, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!self.account) {
                            throw new Error('Must select a trading account before creating a settlement. Try tradingAccount.settlements().create()');
                        }
                        body = Object.assign({}, params);
                        body.payload = JSON.stringify(body.payload);
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/settlements");
                        return [4 /*yield*/, self.bitgo
                                .post(url)
                                .send(body)
                                .result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new settlement_1.Settlement(response, self.bitgo, self.enterpriseId)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return Settlements;
}());
exports.Settlements = Settlements;
//# sourceMappingURL=data:application/json;base64,