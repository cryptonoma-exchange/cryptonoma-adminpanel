"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
var affirmation_1 = require("./affirmation");
var SettlementStatus;
(function (SettlementStatus) {
    SettlementStatus["CANCELED"] = "canceled";
    SettlementStatus["PENDING"] = "pending";
    SettlementStatus["REJECTED"] = "rejected";
    SettlementStatus["SETTLED"] = "settled";
    SettlementStatus["FAILED"] = "failed";
})(SettlementStatus = exports.SettlementStatus || (exports.SettlementStatus = {}));
var SettlementType;
(function (SettlementType) {
    SettlementType["DIRECT"] = "direct";
    SettlementType["AGENCY"] = "agency";
})(SettlementType = exports.SettlementType || (exports.SettlementType = {}));
var Settlement = /** @class */ (function () {
    function Settlement(settlementData, bitgo, enterpriseId) {
        var _this = this;
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.id = settlementData.id;
        this.requesterAccountId = settlementData.requesterAccountId;
        this.status = settlementData.status;
        this.type = settlementData.type;
        this.affirmations = settlementData.affirmations.map(function (affirmation) { return new affirmation_1.Affirmation(affirmation, _this.bitgo, _this.enterpriseId); });
        this.createdAt = new Date(settlementData.createdAt);
        this.expireAt = new Date(settlementData.expireAt);
        this.settledAt = new Date(settlementData.settledAt);
        this.trades = settlementData.trades;
    }
    return Settlement;
}());
exports.Settlement = Settlement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi90cmFkaW5nL3NldHRsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUlILDZDQUE0QztBQUU1QyxJQUFZLGdCQU1YO0FBTkQsV0FBWSxnQkFBZ0I7SUFDMUIseUNBQXFCLENBQUE7SUFDckIsdUNBQW1CLENBQUE7SUFDbkIseUNBQXFCLENBQUE7SUFDckIsdUNBQW1CLENBQUE7SUFDbkIscUNBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQU5XLGdCQUFnQixHQUFoQix3QkFBZ0IsS0FBaEIsd0JBQWdCLFFBTTNCO0FBRUQsSUFBWSxjQUdYO0FBSEQsV0FBWSxjQUFjO0lBQ3hCLG1DQUFpQixDQUFBO0lBQ2pCLG1DQUFpQixDQUFBO0FBQ25CLENBQUMsRUFIVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQUd6QjtBQUVEO0lBY0Usb0JBQVksY0FBYyxFQUFFLEtBQUssRUFBRSxZQUFvQjtRQUF2RCxpQkFlQztRQWRDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRWpDLElBQUksQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDakQsVUFBQSxXQUFXLElBQUksT0FBQSxJQUFJLHlCQUFXLENBQUMsV0FBVyxFQUFFLEtBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxFQUEzRCxDQUEyRCxDQUMzRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBaUIsQ0FBQztJQUNqRCxDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBOUJELElBOEJDO0FBOUJZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuXG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uLy4uL2JpdGdvJztcbmltcG9ydCB7IFRyYWRlIH0gZnJvbSAnLi90cmFkZSc7XG5pbXBvcnQgeyBBZmZpcm1hdGlvbiB9IGZyb20gJy4vYWZmaXJtYXRpb24nO1xuXG5leHBvcnQgZW51bSBTZXR0bGVtZW50U3RhdHVzIHtcbiAgQ0FOQ0VMRUQgPSAnY2FuY2VsZWQnLFxuICBQRU5ESU5HID0gJ3BlbmRpbmcnLFxuICBSRUpFQ1RFRCA9ICdyZWplY3RlZCcsXG4gIFNFVFRMRUQgPSAnc2V0dGxlZCcsXG4gIEZBSUxFRCA9ICdmYWlsZWQnLFxufVxuXG5leHBvcnQgZW51bSBTZXR0bGVtZW50VHlwZSB7XG4gIERJUkVDVCA9ICdkaXJlY3QnLFxuICBBR0VOQ1kgPSAnYWdlbmN5Jyxcbn1cblxuZXhwb3J0IGNsYXNzIFNldHRsZW1lbnQge1xuICBwcml2YXRlIHJlYWRvbmx5IGJpdGdvOiBCaXRHbztcbiAgcHJpdmF0ZSByZWFkb25seSBlbnRlcnByaXNlSWQ6IHN0cmluZztcblxuICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgcHVibGljIHJlcXVlc3RlckFjY291bnRJZDogc3RyaW5nO1xuICBwdWJsaWMgc3RhdHVzOiBTZXR0bGVtZW50U3RhdHVzO1xuICBwdWJsaWMgdHlwZTogU2V0dGxlbWVudFR5cGU7XG4gIHB1YmxpYyBhZmZpcm1hdGlvbnM6IEFmZmlybWF0aW9uW107XG4gIHB1YmxpYyBjcmVhdGVkQXQ6IERhdGU7XG4gIHB1YmxpYyBleHBpcmVBdDogRGF0ZTtcbiAgcHVibGljIHNldHRsZWRBdDogRGF0ZTtcbiAgcHVibGljIHRyYWRlczogVHJhZGVbXTtcblxuICBjb25zdHJ1Y3RvcihzZXR0bGVtZW50RGF0YSwgYml0Z28sIGVudGVycHJpc2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuXG4gICAgdGhpcy5pZCA9IHNldHRsZW1lbnREYXRhLmlkO1xuICAgIHRoaXMucmVxdWVzdGVyQWNjb3VudElkID0gc2V0dGxlbWVudERhdGEucmVxdWVzdGVyQWNjb3VudElkO1xuICAgIHRoaXMuc3RhdHVzID0gc2V0dGxlbWVudERhdGEuc3RhdHVzO1xuICAgIHRoaXMudHlwZSA9IHNldHRsZW1lbnREYXRhLnR5cGU7XG4gICAgdGhpcy5hZmZpcm1hdGlvbnMgPSBzZXR0bGVtZW50RGF0YS5hZmZpcm1hdGlvbnMubWFwKFxuICAgICAgYWZmaXJtYXRpb24gPT4gbmV3IEFmZmlybWF0aW9uKGFmZmlybWF0aW9uLCB0aGlzLmJpdGdvLCB0aGlzLmVudGVycHJpc2VJZClcbiAgICApO1xuICAgIHRoaXMuY3JlYXRlZEF0ID0gbmV3IERhdGUoc2V0dGxlbWVudERhdGEuY3JlYXRlZEF0KTtcbiAgICB0aGlzLmV4cGlyZUF0ID0gbmV3IERhdGUoc2V0dGxlbWVudERhdGEuZXhwaXJlQXQpO1xuICAgIHRoaXMuc2V0dGxlZEF0ID0gbmV3IERhdGUoc2V0dGxlbWVudERhdGEuc2V0dGxlZEF0KTtcbiAgICB0aGlzLnRyYWRlcyA9IHNldHRsZW1lbnREYXRhLnRyYWRlcyBhcyBUcmFkZVtdO1xuICB9XG59XG4iXX0=