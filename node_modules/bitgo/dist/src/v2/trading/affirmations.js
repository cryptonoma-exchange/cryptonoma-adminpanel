"use strict";
/**
 * @prettier
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var Bluebird = require("bluebird");
var affirmation_1 = require("./affirmation");
var co = Bluebird.coroutine;
var Affirmations = /** @class */ (function () {
    function Affirmations(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * Lists all affirmations for an enterprise
     * @param status optional status to filter affirmations by
     * @param callback
     */
    Affirmations.prototype.list = function (status, callback) {
        var self = this;
        return co(function list() {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (self.account) {
                            url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/affirmations");
                        }
                        else {
                            url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/affirmations");
                        }
                        if (status) {
                            url = url + "?status=" + status;
                        }
                        return [4 /*yield*/, self.bitgo.get(url).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.affirmations.map(function (affirmation) { return new affirmation_1.Affirmation(affirmation, self.bitgo, self.enterpriseId); })];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Retrieves a single affirmation by its ID
     * @param id ID of the affirmation to retrieve
     * @param accountId ID of the trading account that the affirmation belongs to
     * @param callback
     */
    Affirmations.prototype.get = function (_a, callback) {
        var id = _a.id, accountId = _a.accountId;
        var self = this;
        return co(function get() {
            var account, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        account = (self.account && self.account.id) || accountId;
                        if (!account) {
                            throw new Error('accountId must be provided in parameters for an enterprise context');
                        }
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + account + "/affirmations/" + id);
                        return [4 /*yield*/, self.bitgo.get(url).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new affirmation_1.Affirmation(response, self.bitgo, self.enterpriseId)];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return Affirmations;
}());
exports.Affirmations = Affirmations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWZmaXJtYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL3RyYWRpbmcvYWZmaXJtYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSDtHQUNHO0FBQ0gsbUNBQXFDO0FBR3JDLDZDQUErRDtBQUcvRCxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBTzlCO0lBS0Usc0JBQVksS0FBWSxFQUFFLFlBQW9CLEVBQUUsT0FBd0I7UUFDdEUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCwyQkFBSSxHQUFKLFVBQUssTUFBMEIsRUFBRSxRQUFzQztRQUNyRSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxFQUFFLENBQWdCLFNBQVUsSUFBSTs7Ozs7d0JBRXJDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTs0QkFDaEIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQy9CLDhCQUE0QixJQUFJLENBQUMsWUFBWSxpQkFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsa0JBQWUsQ0FDeEYsQ0FBQzt5QkFDSDs2QkFBTTs0QkFDTCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyw4QkFBNEIsSUFBSSxDQUFDLFlBQVksa0JBQWUsQ0FBQyxDQUFDO3lCQUNqRzt3QkFDRCxJQUFJLE1BQU0sRUFBRTs0QkFDVixHQUFHLEdBQU0sR0FBRyxnQkFBVyxNQUFRLENBQUM7eUJBQ2pDO3dCQUVnQixxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQTdDLFFBQVEsR0FBRyxTQUFrQzt3QkFFbkQsc0JBQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBQSxXQUFXLElBQUksT0FBQSxJQUFJLHlCQUFXLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUEzRCxDQUEyRCxDQUFDLEVBQUM7OztTQUM5RyxDQUFDO2FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCwwQkFBRyxHQUFILFVBQUksRUFBMkMsRUFBRSxRQUFvQztZQUEvRSxVQUFFLEVBQUUsd0JBQVM7UUFDakIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFjLFNBQVUsR0FBRzs7Ozs7d0JBQzVCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxTQUFTLENBQUM7d0JBQy9ELElBQUksQ0FBQyxPQUFPLEVBQUU7NEJBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO3lCQUN2Rjt3QkFFSyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsOEJBQTRCLElBQUksQ0FBQyxZQUFZLGlCQUFZLE9BQU8sc0JBQWlCLEVBQUksQ0FDdEYsQ0FBQzt3QkFDZSxxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQTdDLFFBQVEsR0FBRyxTQUFrQzt3QkFDbkQsc0JBQU8sSUFBSSx5QkFBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBQzs7O1NBQ2pFLENBQUM7YUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ1YsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUE5REQsSUE4REM7QUE5RFksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5cbi8qKlxuICovXG5pbXBvcnQgKiBhcyBCbHVlYmlyZCBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uLy4uL2JpdGdvJztcbmltcG9ydCB7IE5vZGVDYWxsYmFjayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEFmZmlybWF0aW9uLCBBZmZpcm1hdGlvblN0YXR1cyB9IGZyb20gJy4vYWZmaXJtYXRpb24nO1xuaW1wb3J0IHsgVHJhZGluZ0FjY291bnQgfSBmcm9tICcuL3RyYWRpbmdBY2NvdW50JztcblxuY29uc3QgY28gPSBCbHVlYmlyZC5jb3JvdXRpbmU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QWZmaXJtYXRpb25QYXJhbWV0ZXJzIHtcbiAgaWQ6IHN0cmluZztcbiAgYWNjb3VudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQWZmaXJtYXRpb25zIHtcbiAgcHJpdmF0ZSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgYWNjb3VudD86IFRyYWRpbmdBY2NvdW50O1xuXG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgZW50ZXJwcmlzZUlkOiBzdHJpbmcsIGFjY291bnQ/OiBUcmFkaW5nQWNjb3VudCkge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmVudGVycHJpc2VJZCA9IGVudGVycHJpc2VJZDtcbiAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RzIGFsbCBhZmZpcm1hdGlvbnMgZm9yIGFuIGVudGVycHJpc2VcbiAgICogQHBhcmFtIHN0YXR1cyBvcHRpb25hbCBzdGF0dXMgdG8gZmlsdGVyIGFmZmlybWF0aW9ucyBieVxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGxpc3Qoc3RhdHVzPzogQWZmaXJtYXRpb25TdGF0dXMsIGNhbGxiYWNrPzogTm9kZUNhbGxiYWNrPEFmZmlybWF0aW9uW10+KTogQmx1ZWJpcmQ8QWZmaXJtYXRpb25bXT4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBjbzxBZmZpcm1hdGlvbltdPihmdW5jdGlvbiogbGlzdCgpIHtcbiAgICAgIGxldCB1cmw7XG4gICAgICBpZiAoc2VsZi5hY2NvdW50KSB7XG4gICAgICAgIHVybCA9IHNlbGYuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7c2VsZi5lbnRlcnByaXNlSWR9L2FjY291bnQvJHtzZWxmLmFjY291bnQuaWR9L2FmZmlybWF0aW9uc2BcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9IHNlbGYuYml0Z28ubWljcm9zZXJ2aWNlc1VybChgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7c2VsZi5lbnRlcnByaXNlSWR9L2FmZmlybWF0aW9uc2ApO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICB1cmwgPSBgJHt1cmx9P3N0YXR1cz0ke3N0YXR1c31gO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHNlbGYuYml0Z28uZ2V0KHVybCkucmVzdWx0KCk7XG5cbiAgICAgIHJldHVybiByZXNwb25zZS5hZmZpcm1hdGlvbnMubWFwKGFmZmlybWF0aW9uID0+IG5ldyBBZmZpcm1hdGlvbihhZmZpcm1hdGlvbiwgc2VsZi5iaXRnbywgc2VsZi5lbnRlcnByaXNlSWQpKTtcbiAgICB9KVxuICAgICAgLmNhbGwodGhpcylcbiAgICAgIC5hc0NhbGxiYWNrKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBzaW5nbGUgYWZmaXJtYXRpb24gYnkgaXRzIElEXG4gICAqIEBwYXJhbSBpZCBJRCBvZiB0aGUgYWZmaXJtYXRpb24gdG8gcmV0cmlldmVcbiAgICogQHBhcmFtIGFjY291bnRJZCBJRCBvZiB0aGUgdHJhZGluZyBhY2NvdW50IHRoYXQgdGhlIGFmZmlybWF0aW9uIGJlbG9uZ3MgdG9cbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBnZXQoeyBpZCwgYWNjb3VudElkIH06IEdldEFmZmlybWF0aW9uUGFyYW1ldGVycywgY2FsbGJhY2s/OiBOb2RlQ2FsbGJhY2s8QWZmaXJtYXRpb24+KTogQmx1ZWJpcmQ8QWZmaXJtYXRpb24+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY288QWZmaXJtYXRpb24+KGZ1bmN0aW9uKiBnZXQoKSB7XG4gICAgICBjb25zdCBhY2NvdW50ID0gKHNlbGYuYWNjb3VudCAmJiBzZWxmLmFjY291bnQuaWQpIHx8IGFjY291bnRJZDtcbiAgICAgIGlmICghYWNjb3VudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FjY291bnRJZCBtdXN0IGJlIHByb3ZpZGVkIGluIHBhcmFtZXRlcnMgZm9yIGFuIGVudGVycHJpc2UgY29udGV4dCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1cmwgPSBzZWxmLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICAgIGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHtzZWxmLmVudGVycHJpc2VJZH0vYWNjb3VudC8ke2FjY291bnR9L2FmZmlybWF0aW9ucy8ke2lkfWBcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHNlbGYuYml0Z28uZ2V0KHVybCkucmVzdWx0KCk7XG4gICAgICByZXR1cm4gbmV3IEFmZmlybWF0aW9uKHJlc3BvbnNlLCBzZWxmLmJpdGdvLCBzZWxmLmVudGVycHJpc2VJZCk7XG4gICAgfSlcbiAgICAgIC5jYWxsKHRoaXMpXG4gICAgICAuYXNDYWxsYmFjayhjYWxsYmFjayk7XG4gIH1cbn1cbiJdfQ==