"use strict";
/**
 * @prettier
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
var Bluebird = require("bluebird");
var tradingPartner_1 = require("./tradingPartner");
var co = Bluebird.coroutine;
// Side of the requester (if they should be considered the primary or the secondary)
// Only important for agency partnerships
// the primaryAccount is the agent, settling trades for the secondary account id
var TradingReferralRequesterSide;
(function (TradingReferralRequesterSide) {
    TradingReferralRequesterSide["PRIMARY"] = "primary";
    TradingReferralRequesterSide["SECONDARY"] = "secondary";
})(TradingReferralRequesterSide = exports.TradingReferralRequesterSide || (exports.TradingReferralRequesterSide = {}));
var TradingPartners = /** @class */ (function () {
    function TradingPartners(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * List all trading partners of your trading account. Your trading partners are the accounts you are allowed to settle with.
     * @param callback
     */
    TradingPartners.prototype.list = function (callback) {
        var self = this;
        return co(function list() {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/tradingpartners");
                        return [4 /*yield*/, self.bitgo.get(url).result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.tradingPartners.map(function (partner) { return new tradingPartner_1.TradingPartner(partner, self.bitgo, self.enterpriseId, self.account); })];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Add trading partner given the unique referralCode provided by trading partner.
     * @param params
     * @param params.referralCode unique referral code provided by counterparty
     * @param params.type type of trading partnership
     * @param params.requesterSide side of the requester (primary or secondary) important for agency relationships
     * @param callback
     */
    TradingPartners.prototype.addByCode = function (params, callback) {
        var self = this;
        return co(function refer() {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = self.bitgo.microservicesUrl("/api/trade/v1/enterprise/" + self.enterpriseId + "/account/" + self.account.id + "/tradingpartners");
                        return [4 /*yield*/, self.bitgo
                                .post(url)
                                .send(params)
                                .result()];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return TradingPartners;
}());
exports.TradingPartners = TradingPartners;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL3RyYWRpbmcvdHJhZGluZ1BhcnRuZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSDtHQUNHO0FBQ0gsbUNBQXFDO0FBS3JDLG1EQUFzRTtBQUV0RSxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBRTlCLG9GQUFvRjtBQUNwRix5Q0FBeUM7QUFDekMsZ0ZBQWdGO0FBQ2hGLElBQVksNEJBR1g7QUFIRCxXQUFZLDRCQUE0QjtJQUN0QyxtREFBbUIsQ0FBQTtJQUNuQix1REFBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSFcsNEJBQTRCLEdBQTVCLG9DQUE0QixLQUE1QixvQ0FBNEIsUUFHdkM7QUFRRDtJQU1FLHlCQUFZLEtBQVksRUFBRSxZQUFvQixFQUFFLE9BQXVCO1FBQ3JFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCw4QkFBSSxHQUFKLFVBQUssUUFBeUM7UUFDNUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFtQixTQUFVLElBQUk7Ozs7O3dCQUNsQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsOEJBQTRCLElBQUksQ0FBQyxZQUFZLGlCQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxxQkFBa0IsQ0FDM0YsQ0FBQzt3QkFDZSxxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQTdDLFFBQVEsR0FBRyxTQUFrQzt3QkFFbkQsc0JBQU8sUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQ2pDLFVBQUEsT0FBTyxJQUFJLE9BQUEsSUFBSSwrQkFBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUF4RSxDQUF3RSxDQUNwRixFQUFDOzs7U0FDSCxDQUFDO2FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILG1DQUFTLEdBQVQsVUFBVSxNQUF5QyxFQUFFLFFBQTJCO1FBQzlFLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBaUIsU0FBVSxLQUFLOzs7Ozt3QkFDakMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3JDLDhCQUE0QixJQUFJLENBQUMsWUFBWSxpQkFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUscUJBQWtCLENBQzNGLENBQUM7d0JBQ2UscUJBQU0sSUFBSSxDQUFDLEtBQUs7aUNBQzlCLElBQUksQ0FBQyxHQUFHLENBQUM7aUNBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQztpQ0FDWixNQUFNLEVBQUUsRUFBQTs7d0JBSEwsUUFBUSxHQUFHLFNBR047d0JBRVgsc0JBQU8sUUFBUSxFQUFDOzs7U0FDakIsQ0FBQzthQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDVixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXhERCxJQXdEQztBQXhEWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cblxuLyoqXG4gKi9cbmltcG9ydCAqIGFzIEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuXG5pbXBvcnQgeyBOb2RlQ2FsbGJhY2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUcmFkaW5nQWNjb3VudCB9IGZyb20gJy4vdHJhZGluZ0FjY291bnQnO1xuaW1wb3J0IHsgVHJhZGluZ1BhcnRuZXIsIFRyYWRpbmdQYXJ0bmVyVHlwZSB9IGZyb20gJy4vdHJhZGluZ1BhcnRuZXInO1xuXG5jb25zdCBjbyA9IEJsdWViaXJkLmNvcm91dGluZTtcblxuLy8gU2lkZSBvZiB0aGUgcmVxdWVzdGVyIChpZiB0aGV5IHNob3VsZCBiZSBjb25zaWRlcmVkIHRoZSBwcmltYXJ5IG9yIHRoZSBzZWNvbmRhcnkpXG4vLyBPbmx5IGltcG9ydGFudCBmb3IgYWdlbmN5IHBhcnRuZXJzaGlwc1xuLy8gdGhlIHByaW1hcnlBY2NvdW50IGlzIHRoZSBhZ2VudCwgc2V0dGxpbmcgdHJhZGVzIGZvciB0aGUgc2Vjb25kYXJ5IGFjY291bnQgaWRcbmV4cG9ydCBlbnVtIFRyYWRpbmdSZWZlcnJhbFJlcXVlc3RlclNpZGUge1xuICBQUklNQVJZID0gJ3ByaW1hcnknLCAvLyBpZiBwYXJ0bmVyc2hpcCBpcyBvZiB0eXBlIGFnZW5jeSwgcHJpbWFyeSBpcyB0aGUgYWdlbnRcbiAgU0VDT05EQVJZID0gJ3NlY29uZGFyeScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhZGluZ1BhcnRuZXJBZGRCeUNvZGVQYXJhbWV0ZXJzIHtcbiAgcmVmZXJyYWxDb2RlOiBzdHJpbmc7XG4gIHR5cGU6IFRyYWRpbmdQYXJ0bmVyVHlwZTtcbiAgcmVxdWVzdGVyU2lkZTogVHJhZGluZ1JlZmVycmFsUmVxdWVzdGVyU2lkZTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWRpbmdQYXJ0bmVycyB7XG4gIHByaXZhdGUgYml0Z286IEJpdEdvO1xuXG4gIHByaXZhdGUgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgYWNjb3VudDogVHJhZGluZ0FjY291bnQ7XG5cbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBlbnRlcnByaXNlSWQ6IHN0cmluZywgYWNjb3VudDogVHJhZGluZ0FjY291bnQpIHtcbiAgICB0aGlzLmJpdGdvID0gYml0Z287XG4gICAgdGhpcy5lbnRlcnByaXNlSWQgPSBlbnRlcnByaXNlSWQ7XG4gICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFsbCB0cmFkaW5nIHBhcnRuZXJzIG9mIHlvdXIgdHJhZGluZyBhY2NvdW50LiBZb3VyIHRyYWRpbmcgcGFydG5lcnMgYXJlIHRoZSBhY2NvdW50cyB5b3UgYXJlIGFsbG93ZWQgdG8gc2V0dGxlIHdpdGguXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgbGlzdChjYWxsYmFjaz86IE5vZGVDYWxsYmFjazxUcmFkaW5nUGFydG5lcltdPik6IEJsdWViaXJkPFRyYWRpbmdQYXJ0bmVyW10+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gY288VHJhZGluZ1BhcnRuZXJbXT4oZnVuY3Rpb24qIGxpc3QoKSB7XG4gICAgICBjb25zdCB1cmwgPSBzZWxmLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICAgIGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHtzZWxmLmVudGVycHJpc2VJZH0vYWNjb3VudC8ke3NlbGYuYWNjb3VudC5pZH0vdHJhZGluZ3BhcnRuZXJzYFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgc2VsZi5iaXRnby5nZXQodXJsKS5yZXN1bHQoKTtcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLnRyYWRpbmdQYXJ0bmVycy5tYXAoXG4gICAgICAgIHBhcnRuZXIgPT4gbmV3IFRyYWRpbmdQYXJ0bmVyKHBhcnRuZXIsIHNlbGYuYml0Z28sIHNlbGYuZW50ZXJwcmlzZUlkLCBzZWxmLmFjY291bnQpXG4gICAgICApO1xuICAgIH0pXG4gICAgICAuY2FsbCh0aGlzKVxuICAgICAgLmFzQ2FsbGJhY2soY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCB0cmFkaW5nIHBhcnRuZXIgZ2l2ZW4gdGhlIHVuaXF1ZSByZWZlcnJhbENvZGUgcHJvdmlkZWQgYnkgdHJhZGluZyBwYXJ0bmVyLlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBwYXJhbSBwYXJhbXMucmVmZXJyYWxDb2RlIHVuaXF1ZSByZWZlcnJhbCBjb2RlIHByb3ZpZGVkIGJ5IGNvdW50ZXJwYXJ0eVxuICAgKiBAcGFyYW0gcGFyYW1zLnR5cGUgdHlwZSBvZiB0cmFkaW5nIHBhcnRuZXJzaGlwXG4gICAqIEBwYXJhbSBwYXJhbXMucmVxdWVzdGVyU2lkZSBzaWRlIG9mIHRoZSByZXF1ZXN0ZXIgKHByaW1hcnkgb3Igc2Vjb25kYXJ5KSBpbXBvcnRhbnQgZm9yIGFnZW5jeSByZWxhdGlvbnNoaXBzXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkQnlDb2RlKHBhcmFtczogVHJhZGluZ1BhcnRuZXJBZGRCeUNvZGVQYXJhbWV0ZXJzLCBjYWxsYmFjaz86IE5vZGVDYWxsYmFjazx7fT4pOiBCbHVlYmlyZDxUcmFkaW5nUGFydG5lcj4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBjbzxUcmFkaW5nUGFydG5lcj4oZnVuY3Rpb24qIHJlZmVyKCkge1xuICAgICAgY29uc3QgdXJsID0gc2VsZi5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7c2VsZi5lbnRlcnByaXNlSWR9L2FjY291bnQvJHtzZWxmLmFjY291bnQuaWR9L3RyYWRpbmdwYXJ0bmVyc2BcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHNlbGYuYml0Z29cbiAgICAgICAgLnBvc3QodXJsKVxuICAgICAgICAuc2VuZChwYXJhbXMpXG4gICAgICAgIC5yZXN1bHQoKTtcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0pXG4gICAgICAuY2FsbCh0aGlzKVxuICAgICAgLmFzQ2FsbGJhY2soY2FsbGJhY2spO1xuICB9XG59XG4iXX0=