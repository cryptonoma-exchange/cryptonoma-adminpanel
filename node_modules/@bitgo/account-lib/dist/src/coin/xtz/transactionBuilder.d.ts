import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey } from '../baseCoin/iface';
import { BaseTransactionBuilder, TransactionType } from '../baseCoin';
import { Address } from './address';
import { Transaction } from './transaction';
import { Fee, IndexedData, Key } from './iface';
import { TransferBuilder } from './transferBuilder';
interface DataToSignOverride extends IndexedData {
    dataToSign: string;
}
/**
 * Tezos transaction builder.
 */
export declare class TransactionBuilder extends BaseTransactionBuilder {
    private _serializedTransaction;
    private _transaction;
    private _type;
    private _blockHeader;
    private _counter;
    private _fee;
    private _sourceAddress;
    private _sourceKeyPair?;
    private _publicKeyToReveal;
    private _initialBalance;
    private _initialDelegate;
    private _walletOwnerPublicKeys;
    private _multisigSignerKeyPairs;
    private _dataToSignOverride;
    private _transfers;
    /**
     * Public constructor.
     *
     * @param _coinConfig
     */
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    protected signImplementation(key: Key): Transaction;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /**
     * Set the transaction branch id.
     *
     * @param {string} blockId A block hash to use as branch reference
     */
    branch(blockId: string): void;
    /**
     * The type of transaction being built.
     *
     * @param {TransactionType} type
     */
    type(type: TransactionType): void;
    /**
     * Set the transaction fees. Low fees may get a transaction rejected or never picked up by bakers.
     *
     * @param {Fee} fee Baker fees. May also include the maximum gas and storage fees to pay
     */
    fee(fee: Fee): void;
    /**
     * Set the transaction initiator. This account will pay for the transaction fees, but it will not
     * be added as an owner of a wallet in a init transaction, unless manually set as one of the
     * owners.
     *
     * @param {string} source A Tezos address
     */
    source(source: string): void;
    /**
     * Set an amount of mutez to transfer in this transaction this transaction. This is different than
     * the amount to transfer from a multisig wallet.
     *
     * @param {string} amount Amount in mutez (1/1000000 Tezies)
     */
    initialBalance(amount: string): void;
    /**
     * Set the transaction counter to prevent submitting repeated transactions.
     *
     * @param {string} counter The counter to use
     */
    counter(counter: string): void;
    /**
     * The public key to reveal.
     *
     * @param {string} publicKey A Tezos public key
     */
    publicKey(publicKey: string): void;
    /**
     * Build a reveal operation for the source account with default fees.
     *
     * @returns {RevealOp} A Tezos reveal operation
     */
    private buildAddressInitializationOperations;
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} publicKey A Tezos public key
     */
    owner(publicKey: string): void;
    /**
     * Set an initial delegate to initialize this wallet to. This is different than the delegation to
     * set while doing a separate delegation transaction.
     *
     * @param {string} delegate The address to delegate the funds to
     */
    initialDelegate(delegate: string): void;
    /**
     * Build an origination operation for a generic multisig contract.
     *
     * @returns {Operation} A Tezos origination operation
     */
    private buildWalletInitializationOperations;
    /**
     * Initialize a new TransferBuilder to for a singlesig or multisig transaction.
     *
     * @param {string} amount Amount in mutez to be transferred
     * @returns {TransferBuilder} A transfer builder
     */
    transfer(amount: string): TransferBuilder;
    /**
     * Calculate the signatures for the multisig transaction.
     *
     * @param {string} packedData The string in hexadecimal to sign
     * @returns {Promise<string[]>} List of signatures for packedData
     */
    private getSignatures;
    /**
     * Override the data to sign for a specific transfer. Used for offline signing to pass the
     * respective dataToSign for transfer at a particular index.
     *
     * @param {DataToSignOverride} data
     */
    overrideDataToSign(data: DataToSignOverride): void;
    /**
     * Build a transaction operation for a generic multisig contract.
     *
     * @returns {Promise<TransactionOp[]>} A Tezos transaction operation
     */
    private buildSendTransactionContent;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
    /** @inheritdoc */
    validateAddress(address: Address): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /** @inheritdoc */
    validateRawTransaction(rawTransaction: any): void;
    /** @inheritdoc */
    validateTransaction(transaction: Transaction): void;
    /** @inheritdoc */
    displayName(): string;
    /** @inheritdoc */
    /** @inheritdoc */
    protected transaction: Transaction;
}
export {};
