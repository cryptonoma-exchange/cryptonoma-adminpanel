"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = __importStar(require("crypto"));
var bitgo_utxo_lib_1 = require("bitgo-utxo-lib");
var blake2b_1 = __importDefault(require("blake2b"));
var CryptoUtils = __importStar(require("../../utils/crypto"));
var Utils = __importStar(require("./utils"));
var iface_1 = require("./iface");
var DEFAULT_SEED_SIZE_BYTES = 16;
/**
 * Tezos keys and address management.
 */
var KeyPair = /** @class */ (function () {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    function KeyPair(source) {
        if (!source) {
            var seed = crypto.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            this.hdNode = bitgo_utxo_lib_1.HDNode.fromSeedBuffer(seed);
        }
        else if (iface_1.isSeed(source)) {
            this.hdNode = bitgo_utxo_lib_1.HDNode.fromSeedBuffer(source.seed);
        }
        else if (iface_1.isPrivateKey(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if (iface_1.isPublicKey(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (this.hdNode) {
            this.keyPair = this.hdNode.keyPair;
        }
    }
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a private key.
     *
     * @param prv An extended or raw private key
     */
    KeyPair.prototype.recordKeysFromPrivateKey = function (prv) {
        if (CryptoUtils.isValidXprv(prv)) {
            this.hdNode = bitgo_utxo_lib_1.HDNode.fromBase58(prv);
        }
        else if (CryptoUtils.isValidPrv(prv)) {
            // Cannot create the HD node without the chain code, so create a regular Key Chain
            this.keyPair = bitgo_utxo_lib_1.ECPair.fromPrivateKeyBuffer(new Buffer(prv, 'hex'));
        }
        else if (Utils.isValidKey(prv, Utils.hashTypes.spsk)) {
            this.keyPair = bitgo_utxo_lib_1.ECPair.fromPrivateKeyBuffer(Utils.decodeKey(prv, Utils.hashTypes.spsk));
        }
        else {
            throw new Error('Unsupported private key');
        }
    };
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a public key.
     *
     * @param {string} pub - An extended, compressed, or uncompressed public key
     */
    KeyPair.prototype.recordKeysFromPublicKey = function (pub) {
        if (CryptoUtils.isValidXpub(pub)) {
            this.hdNode = bitgo_utxo_lib_1.HDNode.fromBase58(pub);
        }
        else if (CryptoUtils.isValidPub(pub)) {
            // Cannot create an HD node without the chain code, so create a regular Key Chain
            this.keyPair = bitgo_utxo_lib_1.ECPair.fromPublicKeyBuffer(new Buffer(pub, 'hex'));
        }
        else if (Utils.isValidKey(pub, Utils.hashTypes.sppk)) {
            this.keyPair = bitgo_utxo_lib_1.ECPair.fromPublicKeyBuffer(Utils.decodeKey(pub, Utils.hashTypes.sppk));
        }
        else {
            throw new Error('Unsupported public key: ' + pub);
        }
    };
    /**
     * Return Tezos default keys with the respective prefixes
     *
     * @returns The keys in the protocol default key format
     */
    KeyPair.prototype.getKeys = function () {
        // Always use the compressed version to be consistent
        var pub = this.keyPair.Q.getEncoded(true);
        var result = {
            pub: Utils.base58encode(Utils.hashTypes.sppk.prefix, pub),
        };
        if (this.keyPair.d) {
            var prv = this.keyPair.getPrivateKeyBuffer();
            result.prv = Utils.base58encode(Utils.hashTypes.spsk.prefix, prv);
        }
        return result;
    };
    /**
     * Get the extended public key, and the private key if one is available. This is only possible
     * when the key pair was created from a seed or extended keys.
     */
    KeyPair.prototype.getExtendedKeys = function () {
        if (!this.hdNode) {
            throw new Error('Cannot get extended keys');
        }
        var result = {
            xpub: this.hdNode.neutered().toBase58(),
        };
        // A neutered HD node means it only contains the public key information
        if (!this.hdNode.isNeutered()) {
            result.xprv = this.hdNode.toBase58();
        }
        return result;
    };
    /**
     * Get a public address.
     */
    KeyPair.prototype.getAddress = function () {
        var pub = this.keyPair.Q.getEncoded(true);
        var out = Buffer.alloc(20);
        var b2b = blake2b_1.default(out.length)
            .update(pub)
            .digest(out);
        return Utils.base58encode(Utils.hashTypes.tz2.prefix, b2b);
    };
    return KeyPair;
}());
exports.KeyPair = KeyPair;
//# sourceMappingURL=keyPair.js.map