"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../baseCoin/errors");
/** Tezos transfer builder. */
// TODO: implement BaseTransferBuilder
var TransferBuilder = /** @class */ (function () {
    function TransferBuilder() {
    }
    TransferBuilder.prototype.amount = function (amount) {
        this._amount = amount;
        return this;
    };
    TransferBuilder.prototype.coin = function (coin) {
        this._coin = coin;
        return this;
    };
    TransferBuilder.prototype.from = function (address) {
        this._fromAddress = address;
        return this;
    };
    TransferBuilder.prototype.to = function (address) {
        this._toAddress = address;
        return this;
    };
    TransferBuilder.prototype.fee = function (fee) {
        this._fee = fee;
        return this;
    };
    TransferBuilder.prototype.gasLimit = function (gasLimit) {
        this._gasLimit = gasLimit;
        return this;
    };
    TransferBuilder.prototype.storageLimit = function (storageLimit) {
        this._storageLimit = storageLimit;
        return this;
    };
    TransferBuilder.prototype.dataToSign = function (dataToSign) {
        this._dataToSign = dataToSign;
        return this;
    };
    TransferBuilder.prototype.counter = function (counter) {
        this._counter = counter;
        return this;
    };
    TransferBuilder.prototype.build = function () {
        if (!this._amount || !this._fromAddress || !this._toAddress || !this._fee) {
            throw new errors_1.BuildTransactionError('Missing transfer mandatory fields. Amount, from address, destination (to) address and fee are mandatory');
        }
        return {
            amount: this._amount,
            coin: this._coin,
            from: this._fromAddress,
            to: this._toAddress,
            fee: {
                fee: this._fee,
                gasLimit: this._gasLimit,
                storageLimit: this._storageLimit,
            },
            dataToSign: this._dataToSign,
            counter: this._counter,
        };
    };
    return TransferBuilder;
}());
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=transferBuilder.js.map