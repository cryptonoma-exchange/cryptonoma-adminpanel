import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseTransaction } from '../baseCoin';
import { BaseKey } from '../baseCoin/iface';
import { TransactionReceipt } from './iface';
/**
 * Tron transaction model.
 */
export declare class Transaction extends BaseTransaction {
    protected _validFrom: number;
    protected _validTo: number;
    private _decodedRawDataHex;
    private _transaction?;
    /**
     * Public constructor.
     */
    constructor(coinConfig: Readonly<CoinConfig>, rawTransaction?: TransactionReceipt);
    /**
     * Parse the transaction raw data and record the most important fields.
     *
     * @param rawData Object from a tron transaction
     */
    private recordRawDataFields;
    /**
     * Recalculate and update the transaction id. This should be done after changing any transaction
     * field since the the id is a hash of the transaction body.
     */
    private updateId;
    /**
     * Extend the expiration date by the given number of milliseconds.
     *
     * @param extensionMs The number of milliseconds to extend the expiration by
     */
    extendExpiration(extensionMs: number): void;
    /**
     * Get the signatures associated with this transaction.
     */
    readonly signature: string[];
    /**
     * Get the time in milliseconds this transaction becomes valid and can be broadcasted to the
     * network.
     */
    readonly validFrom: number;
    /**
     * Get the expiration time in milliseconds.
     */
    readonly validTo: number;
    /** @inheritdoc */
    canSign(key: BaseKey): boolean;
    /** @inheritdoc */
    toJson(): TransactionReceipt;
    /** @inheritdoc */
    toBroadcastFormat(): any;
}
