/// <reference types="node" />
import { DefaultKeys, ExtendedKeys } from '../baseCoin/iface';
import { AddressFormat } from '../baseCoin/enum';
import { KeyPairOptions } from './iface';
/**
 * Tron keys and address management.
 */
export declare class KeyPair {
    private hdNode?;
    private keyPair;
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    constructor(source?: KeyPairOptions);
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a private key.
     *
     * @param prv An extended or raw private key
     */
    private recordKeysFromPrivateKey;
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a public key.
     *
     * @param {String} pub - An extended, compressed, or uncompressed public key
     */
    private recordKeysFromPublicKey;
    /**
     * Tron default keys format is raw private and uncompressed public key
     * @return The keys in the protocol default key format
     */
    getKeys(): DefaultKeys;
    /**
     * Get the extended public key, and the private key if one is available. This is only possible
     * when the key pair was created from a seed or extended keys.
     */
    getExtendedKeys(): ExtendedKeys;
    /**
     * Get a public address in the specified format, or in base58 if none is provided.
     */
    getAddress(format?: AddressFormat): string;
    /**
     * Generates a signature for an arbitrary string with the current private key using keccak256
     * hashing algorithm. Throws if there is no private key.
     * @param {string} message to produce a signature for
     * @return The signature as a buffer
     */
    signMessage(message: string): Buffer;
    /**
     * Verifies a message signature using the current public key.
     * @param {string} message signed
     * @param {Buffer} signature to verify
     * @return True if the message was signed with the current key pair
     */
    verifySignature(message: string, signature: Buffer): boolean;
}
