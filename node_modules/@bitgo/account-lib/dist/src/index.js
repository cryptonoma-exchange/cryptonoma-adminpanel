"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var statics_1 = require("@bitgo/statics");
var errors_1 = require("./coin/baseCoin/errors");
var crypto = __importStar(require("./utils/crypto"));
exports.crypto = crypto;
// coins
var BaseCoin = __importStar(require("./coin/baseCoin"));
exports.BaseCoin = BaseCoin;
var Trx = __importStar(require("./coin/trx"));
exports.Trx = Trx;
var Xtz = __importStar(require("./coin/xtz"));
exports.Xtz = Xtz;
var coinBuilderMap = {
    trx: Trx.TransactionBuilder,
    ttrx: Trx.TransactionBuilder,
    xtz: Xtz.TransactionBuilder,
    txtz: Xtz.TransactionBuilder,
};
/**
 * Get the list of coin tickers supported by this library.
 */
exports.supportedCoins = Object.keys(coinBuilderMap);
/**
 * Get a transaction builder for the given coin.
 *
 * @param coinName One of the {@code supportedCoins}
 * @return An instance of a {@code TransactionBuilder}
 */
function getBuilder(coinName) {
    var coin = coinName.toLowerCase().trim();
    var builderClass = coinBuilderMap[coin];
    if (!builderClass) {
        throw new errors_1.BuildTransactionError("Coin " + coinName + " not supported");
    }
    return new builderClass(statics_1.coins.get(coin));
}
exports.getBuilder = getBuilder;
//# sourceMappingURL=index.js.map